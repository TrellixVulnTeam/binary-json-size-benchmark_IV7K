
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/esmrc/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_cjs_metadata;
        private: static const ::bond::Metadata s_mainFields_metadata;
        private: static const ::bond::Metadata s_mode_metadata;
        private: static const ::bond::Metadata s_force_metadata;
        private: static const ::bond::Metadata s_cache_metadata;
        private: static const ::bond::Metadata s_sourceMap_metadata;

        public: struct var
        {
            // cjs
            typedef struct cjs_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::cjs,
                &s_cjs_metadata
            > {} cjs;
        
            // mainFields
            typedef struct mainFields_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list<std::string>,
                &Main::mainFields,
                &s_mainFields_metadata
            > {} mainFields;
        
            // mode
            typedef struct mode_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::mode,
                &s_mode_metadata
            > {} mode;
        
            // force
            typedef struct force_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::force,
                &s_force_metadata
            > {} force;
        
            // cache
            typedef struct cache_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::cache,
                &s_cache_metadata
            > {} cache;
        
            // sourceMap
            typedef struct sourceMap_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::sourceMap,
                &s_sourceMap_metadata
            > {} sourceMap;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::sourceMap>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::cache>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::force>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::mode>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::mainFields>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::cjs>::type fields6;

        public: typedef fields6::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
