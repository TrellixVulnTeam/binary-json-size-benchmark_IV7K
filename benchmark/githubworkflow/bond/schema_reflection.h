
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/githubworkflow/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Environment
    //
    struct Environment::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_buildSuiteDir_metadata;

        public: struct var
        {
            // buildSuiteDir
            typedef struct buildSuiteDir_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Environment,
                std::string,
                &Environment::buildSuiteDir,
                &s_buildSuiteDir_metadata
            > {} buildSuiteDir;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::buildSuiteDir>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Environment", "benchmark.Environment",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // With
    //
    struct With::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_nodeVersion_metadata;

        public: struct var
        {
            // nodeVersion
            typedef struct nodeVersion_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                With,
                std::string,
                &With::nodeVersion,
                &s_nodeVersion_metadata
            > {} nodeVersion;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::nodeVersion>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("With", "benchmark.With",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Step
    //
    struct Step::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_uses_metadata;
        private: static const ::bond::Metadata s_run_metadata;
        private: static const ::bond::Metadata s_workingDirectory_metadata;
        private: static const ::bond::Metadata s_with_metadata;
        private: static const ::bond::Metadata s_name_metadata;

        public: struct var
        {
            // uses
            typedef struct uses_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::optional_field_modifier,
                Step,
                ::bond::maybe<std::string>,
                &Step::uses,
                &s_uses_metadata
            > {} uses;
        
            // run
            typedef struct run_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::optional_field_modifier,
                Step,
                ::bond::maybe<std::string>,
                &Step::run,
                &s_run_metadata
            > {} run;
        
            // workingDirectory
            typedef struct workingDirectory_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::optional_field_modifier,
                Step,
                ::bond::maybe<std::string>,
                &Step::workingDirectory,
                &s_workingDirectory_metadata
            > {} workingDirectory;
        
            // with
            typedef struct with_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::optional_field_modifier,
                Step,
                ::benchmark::With,
                &Step::with,
                &s_with_metadata
            > {} with;
        
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::optional_field_modifier,
                Step,
                ::bond::maybe<std::string>,
                &Step::name,
                &s_name_metadata
            > {} name;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::name>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::with>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::workingDirectory>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::run>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::uses>::type fields5;

        public: typedef fields5::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Step", "benchmark.Step",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Build
    //
    struct Build::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_runsOn_metadata;
        private: static const ::bond::Metadata s_env_metadata;
        private: static const ::bond::Metadata s_steps_metadata;

        public: struct var
        {
            // runsOn
            typedef struct runsOn_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Build,
                std::string,
                &Build::runsOn,
                &s_runsOn_metadata
            > {} runsOn;
        
            // env
            typedef struct env_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Build,
                ::benchmark::Environment,
                &Build::env,
                &s_env_metadata
            > {} env;
        
            // steps
            typedef struct steps_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Build,
                std::list< ::benchmark::Step>,
                &Build::steps,
                &s_steps_metadata
            > {} steps;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::steps>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::env>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::runsOn>::type fields3;

        public: typedef fields3::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Build", "benchmark.Build",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Jobs
    //
    struct Jobs::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_build_metadata;

        public: struct var
        {
            // build
            typedef struct build_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Jobs,
                ::benchmark::Build,
                &Jobs::build,
                &s_build_metadata
            > {} build;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::build>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Jobs", "benchmark.Jobs",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_name_metadata;
        private: static const ::bond::Metadata s_on_metadata;
        private: static const ::bond::Metadata s_jobs_metadata;

        public: struct var
        {
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::name,
                &s_name_metadata
            > {} name;
        
            // on
            typedef struct on_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list<std::string>,
                &Main::on,
                &s_on_metadata
            > {} on;
        
            // jobs
            typedef struct jobs_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Jobs,
                &Main::jobs,
                &s_jobs_metadata
            > {} jobs;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::jobs>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::on>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::name>::type fields3;

        public: typedef fields3::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
