
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/packagejsonlintrc/bond/schema.bond
//   Output filename: schema_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "schema_reflection.h"
#include <bond/core/exception.h>

namespace benchmark
{
    
    const ::bond::Metadata ComplexRule::Schema::metadata
        = ComplexRule::Schema::GetMetadata();
    
    const ::bond::Metadata ComplexRule::Schema::s_level_metadata
        = ::bond::reflection::MetadataInit(::bond::nothing, "level");
    
    const ::bond::Metadata ComplexRule::Schema::s_options_metadata
        = ::bond::reflection::MetadataInit(::bond::nothing, "options");
    
    const ::bond::Metadata ComplexRule::Schema::s_booleanOptions_metadata
        = ::bond::reflection::MetadataInit(::bond::nothing, "booleanOptions");

    
    const ::bond::Metadata Rules::Schema::metadata
        = Rules::Schema::GetMetadata();
    
    const ::bond::Metadata Rules::Schema::s_requireAuthor_metadata
        = ::bond::reflection::MetadataInit("requireAuthor", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_requireDescription_metadata
        = ::bond::reflection::MetadataInit("requireDescription", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_requireEngines_metadata
        = ::bond::reflection::MetadataInit("requireEngines", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_requireLicense_metadata
        = ::bond::reflection::MetadataInit("requireLicense", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_requireName_metadata
        = ::bond::reflection::MetadataInit("requireName", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_requireRepository_metadata
        = ::bond::reflection::MetadataInit("requireRepository", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_requireVersion_metadata
        = ::bond::reflection::MetadataInit("requireVersion", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_requireBugs_metadata
        = ::bond::reflection::MetadataInit("requireBugs", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_requireHomepage_metadata
        = ::bond::reflection::MetadataInit("requireHomepage", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_requireKeywords_metadata
        = ::bond::reflection::MetadataInit("requireKeywords", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_binType_metadata
        = ::bond::reflection::MetadataInit("binType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_configType_metadata
        = ::bond::reflection::MetadataInit("configType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_descriptionType_metadata
        = ::bond::reflection::MetadataInit("descriptionType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_devDependenciesType_metadata
        = ::bond::reflection::MetadataInit("devDependenciesType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_directoriesType_metadata
        = ::bond::reflection::MetadataInit("directoriesType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_enginesType_metadata
        = ::bond::reflection::MetadataInit("enginesType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_filesType_metadata
        = ::bond::reflection::MetadataInit("filesType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_homepageType_metadata
        = ::bond::reflection::MetadataInit("homepageType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_keywordsType_metadata
        = ::bond::reflection::MetadataInit("keywordsType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_licenseType_metadata
        = ::bond::reflection::MetadataInit("licenseType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_mainType_metadata
        = ::bond::reflection::MetadataInit("mainType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_manType_metadata
        = ::bond::reflection::MetadataInit("manType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_nameType_metadata
        = ::bond::reflection::MetadataInit("nameType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_preferGlobalType_metadata
        = ::bond::reflection::MetadataInit("preferGlobalType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_privateType_metadata
        = ::bond::reflection::MetadataInit("privateType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_repositoryType_metadata
        = ::bond::reflection::MetadataInit("repositoryType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_scriptsType_metadata
        = ::bond::reflection::MetadataInit("scriptsType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_versionType_metadata
        = ::bond::reflection::MetadataInit("versionType", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_validValuesAuthor_metadata
        = ::bond::reflection::MetadataInit("validValuesAuthor", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_validValuesPrivate_metadata
        = ::bond::reflection::MetadataInit("validValuesPrivate", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_noRestrictedDependencies_metadata
        = ::bond::reflection::MetadataInit("noRestrictedDependencies", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_noRestrictedPreReleaseDependencies_metadata
        = ::bond::reflection::MetadataInit("noRestrictedPreReleaseDependencies", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_noRestrictedInvalidDevDependencies_metadata
        = ::bond::reflection::MetadataInit("noRestrictedInvalidDevDependencies", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_noRestrictedPreReleaseDevDependencies_metadata
        = ::bond::reflection::MetadataInit("noRestrictedPreReleaseDevDependencies", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_nameFormat_metadata
        = ::bond::reflection::MetadataInit("nameFormat", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());
    
    const ::bond::Metadata Rules::Schema::s_versionFormat_metadata
        = ::bond::reflection::MetadataInit("versionFormat", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());

    
    const ::bond::Metadata Main::Schema::metadata
        = Main::Schema::GetMetadata();
    
    const ::bond::Metadata Main::Schema::s_rules_metadata
        = ::bond::reflection::MetadataInit("rules", ::bond::reflection::required_field_modifier::value,
                ::bond::reflection::Attributes());

    
} // namespace benchmark
