
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/epr/bond/schema.bond
//   Output filename: schema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x0902
#error This file was generated by a newer version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0c10
#error This file was generated by an older version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>



namespace benchmark
{
    
    struct Rule
    {
        std::string path;
        std::string regex;
        std::list<std::string> types;
        bool allowData;
        
        Rule()
          : allowData()
        {
        }

        
        // Compiler generated copy ctor OK
        Rule(const Rule&) = default;
        
        Rule(Rule&&) = default;
        
        
        // Compiler generated operator= OK
        Rule& operator=(const Rule&) = default;
        Rule& operator=(Rule&&) = default;

        bool operator==(const Rule& other) const
        {
            return true
                && (path == other.path)
                && (regex == other.regex)
                && (types == other.types)
                && (allowData == other.allowData);
        }

        bool operator!=(const Rule& other) const
        {
            return !(*this == other);
        }

        void swap(Rule& other)
        {
            using std::swap;
            swap(path, other.path);
            swap(regex, other.regex);
            swap(types, other.types);
            swap(allowData, other.allowData);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Rule& left, ::benchmark::Rule& right)
    {
        left.swap(right);
    }

    
    struct Main
    {
        std::string site;
        uint32_t maxAge;
        std::string reportUrl;
        std::string defaultNavBehavior;
        std::string defaultResBehavior;
        std::list< ::benchmark::Rule> rules;
        
        Main()
          : maxAge()
        {
        }

        
        // Compiler generated copy ctor OK
        Main(const Main&) = default;
        
        Main(Main&&) = default;
        
        
        // Compiler generated operator= OK
        Main& operator=(const Main&) = default;
        Main& operator=(Main&&) = default;

        bool operator==(const Main& other) const
        {
            return true
                && (site == other.site)
                && (maxAge == other.maxAge)
                && (reportUrl == other.reportUrl)
                && (defaultNavBehavior == other.defaultNavBehavior)
                && (defaultResBehavior == other.defaultResBehavior)
                && (rules == other.rules);
        }

        bool operator!=(const Main& other) const
        {
            return !(*this == other);
        }

        void swap(Main& other)
        {
            using std::swap;
            swap(site, other.site);
            swap(maxAge, other.maxAge);
            swap(reportUrl, other.reportUrl);
            swap(defaultNavBehavior, other.defaultNavBehavior);
            swap(defaultResBehavior, other.defaultResBehavior);
            swap(rules, other.rules);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Main& left, ::benchmark::Main& right)
    {
        left.swap(right);
    }
} // namespace benchmark
