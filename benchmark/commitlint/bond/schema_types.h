
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/commitlint/bond/schema.bond
//   Output filename: schema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x0902
#error This file was generated by a newer version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0c10
#error This file was generated by an older version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>



namespace benchmark
{
    
    struct Rule
    {
        ::bond::maybe<std::string> textual;
        ::bond::maybe<uint8_t> numeric;
        ::bond::maybe<std::list<std::string> > multitextual;
        
        Rule()
        {
        }

        
        // Compiler generated copy ctor OK
        Rule(const Rule&) = default;
        
        Rule(Rule&&) = default;
        
        
        // Compiler generated operator= OK
        Rule& operator=(const Rule&) = default;
        Rule& operator=(Rule&&) = default;

        bool operator==(const Rule& other) const
        {
            return true
                && (textual == other.textual)
                && (numeric == other.numeric)
                && (multitextual == other.multitextual);
        }

        bool operator!=(const Rule& other) const
        {
            return !(*this == other);
        }

        void swap(Rule& other)
        {
            using std::swap;
            swap(textual, other.textual);
            swap(numeric, other.numeric);
            swap(multitextual, other.multitextual);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Rule& left, ::benchmark::Rule& right)
    {
        left.swap(right);
    }

    
    struct Rules
    {
        std::list< ::benchmark::Rule> scopeCase;
        std::list< ::benchmark::Rule> subjectCase;
        
        Rules()
        {
        }

        
        // Compiler generated copy ctor OK
        Rules(const Rules&) = default;
        
        Rules(Rules&&) = default;
        
        
        // Compiler generated operator= OK
        Rules& operator=(const Rules&) = default;
        Rules& operator=(Rules&&) = default;

        bool operator==(const Rules& other) const
        {
            return true
                && (scopeCase == other.scopeCase)
                && (subjectCase == other.subjectCase);
        }

        bool operator!=(const Rules& other) const
        {
            return !(*this == other);
        }

        void swap(Rules& other)
        {
            using std::swap;
            swap(scopeCase, other.scopeCase);
            swap(subjectCase, other.subjectCase);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Rules& left, ::benchmark::Rules& right)
    {
        left.swap(right);
    }

    
    struct Main
    {
        ::benchmark::Rules rules;
        
        Main()
        {
        }

        
        // Compiler generated copy ctor OK
        Main(const Main&) = default;
        
        Main(Main&&) = default;
        
        
        // Compiler generated operator= OK
        Main& operator=(const Main&) = default;
        Main& operator=(Main&&) = default;

        bool operator==(const Main& other) const
        {
            return true
                && (rules == other.rules);
        }

        bool operator!=(const Main& other) const
        {
            return !(*this == other);
        }

        void swap(Main& other)
        {
            using std::swap;
            swap(rules, other.rules);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Main& left, ::benchmark::Main& right)
    {
        left.swap(right);
    }
} // namespace benchmark
