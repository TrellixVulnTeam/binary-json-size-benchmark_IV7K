
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/jsonfeed/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Author
    //
    struct Author::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_name_metadata;
        private: static const ::bond::Metadata s_url_metadata;
        private: static const ::bond::Metadata s_avatar_metadata;

        public: struct var
        {
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Author,
                std::string,
                &Author::name,
                &s_name_metadata
            > {} name;
        
            // url
            typedef struct url_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Author,
                std::string,
                &Author::url,
                &s_url_metadata
            > {} url;
        
            // avatar
            typedef struct avatar_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Author,
                std::string,
                &Author::avatar,
                &s_avatar_metadata
            > {} avatar;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::avatar>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::url>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::name>::type fields3;

        public: typedef fields3::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Author", "benchmark.Author",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Item
    //
    struct Item::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_id_metadata;
        private: static const ::bond::Metadata s_url_metadata;
        private: static const ::bond::Metadata s_content_text_metadata;
        private: static const ::bond::Metadata s_date_published_metadata;

        public: struct var
        {
            // id
            typedef struct id_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Item,
                std::string,
                &Item::id,
                &s_id_metadata
            > {} id;
        
            // url
            typedef struct url_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Item,
                std::string,
                &Item::url,
                &s_url_metadata
            > {} url;
        
            // content_text
            typedef struct content_text_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Item,
                std::string,
                &Item::content_text,
                &s_content_text_metadata
            > {} content_text;
        
            // date_published
            typedef struct date_published_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Item,
                std::string,
                &Item::date_published,
                &s_date_published_metadata
            > {} date_published;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::date_published>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::content_text>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::url>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::id>::type fields4;

        public: typedef fields4::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Item", "benchmark.Item",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_version_metadata;
        private: static const ::bond::Metadata s_user_comment_metadata;
        private: static const ::bond::Metadata s_title_metadata;
        private: static const ::bond::Metadata s_home_page_url_metadata;
        private: static const ::bond::Metadata s_feed_url_metadata;
        private: static const ::bond::Metadata s_author_metadata;
        private: static const ::bond::Metadata s_items_metadata;

        public: struct var
        {
            // version
            typedef struct version_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::version,
                &s_version_metadata
            > {} version;
        
            // user_comment
            typedef struct user_comment_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::user_comment,
                &s_user_comment_metadata
            > {} user_comment;
        
            // title
            typedef struct title_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::title,
                &s_title_metadata
            > {} title;
        
            // home_page_url
            typedef struct home_page_url_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::home_page_url,
                &s_home_page_url_metadata
            > {} home_page_url;
        
            // feed_url
            typedef struct feed_url_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::feed_url,
                &s_feed_url_metadata
            > {} feed_url;
        
            // author
            typedef struct author_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Author,
                &Main::author,
                &s_author_metadata
            > {} author;
        
            // items
            typedef struct items_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Item>,
                &Main::items,
                &s_items_metadata
            > {} items;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::items>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::author>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::feed_url>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::home_page_url>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::title>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::user_comment>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::version>::type fields7;

        public: typedef fields7::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
