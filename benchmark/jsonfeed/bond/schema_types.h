
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/jsonfeed/bond/schema.bond
//   Output filename: schema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x0902
#error This file was generated by a newer version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0c10
#error This file was generated by an older version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>



namespace benchmark
{
    
    struct Author
    {
        std::string name;
        std::string url;
        std::string avatar;
        
        Author()
        {
        }

        
        // Compiler generated copy ctor OK
        Author(const Author&) = default;
        
        Author(Author&&) = default;
        
        
        // Compiler generated operator= OK
        Author& operator=(const Author&) = default;
        Author& operator=(Author&&) = default;

        bool operator==(const Author& other) const
        {
            return true
                && (name == other.name)
                && (url == other.url)
                && (avatar == other.avatar);
        }

        bool operator!=(const Author& other) const
        {
            return !(*this == other);
        }

        void swap(Author& other)
        {
            using std::swap;
            swap(name, other.name);
            swap(url, other.url);
            swap(avatar, other.avatar);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Author& left, ::benchmark::Author& right)
    {
        left.swap(right);
    }

    
    struct Item
    {
        std::string id;
        std::string url;
        std::string content_text;
        std::string date_published;
        
        Item()
        {
        }

        
        // Compiler generated copy ctor OK
        Item(const Item&) = default;
        
        Item(Item&&) = default;
        
        
        // Compiler generated operator= OK
        Item& operator=(const Item&) = default;
        Item& operator=(Item&&) = default;

        bool operator==(const Item& other) const
        {
            return true
                && (id == other.id)
                && (url == other.url)
                && (content_text == other.content_text)
                && (date_published == other.date_published);
        }

        bool operator!=(const Item& other) const
        {
            return !(*this == other);
        }

        void swap(Item& other)
        {
            using std::swap;
            swap(id, other.id);
            swap(url, other.url);
            swap(content_text, other.content_text);
            swap(date_published, other.date_published);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Item& left, ::benchmark::Item& right)
    {
        left.swap(right);
    }

    
    struct Main
    {
        std::string version;
        std::string user_comment;
        std::string title;
        std::string home_page_url;
        std::string feed_url;
        ::benchmark::Author author;
        std::list< ::benchmark::Item> items;
        
        Main()
        {
        }

        
        // Compiler generated copy ctor OK
        Main(const Main&) = default;
        
        Main(Main&&) = default;
        
        
        // Compiler generated operator= OK
        Main& operator=(const Main&) = default;
        Main& operator=(Main&&) = default;

        bool operator==(const Main& other) const
        {
            return true
                && (version == other.version)
                && (user_comment == other.user_comment)
                && (title == other.title)
                && (home_page_url == other.home_page_url)
                && (feed_url == other.feed_url)
                && (author == other.author)
                && (items == other.items);
        }

        bool operator!=(const Main& other) const
        {
            return !(*this == other);
        }

        void swap(Main& other)
        {
            using std::swap;
            swap(version, other.version);
            swap(user_comment, other.user_comment);
            swap(title, other.title);
            swap(home_page_url, other.home_page_url);
            swap(feed_url, other.feed_url);
            swap(author, other.author);
            swap(items, other.items);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Main& left, ::benchmark::Main& right)
    {
        left.swap(right);
    }
} // namespace benchmark
