
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/openweathermap/bond/schema.bond
//   Output filename: schema_apply.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/bond.h>
#include <bond/stream/output_buffer.h>


namespace bond
{
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Coord.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Coord>& transform,
               const ::bond::bonded< ::benchmark::Coord>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Coord& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Coord, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Coord>& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Coord>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Coord& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Coord& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Coord& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Coord>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Coord& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Coord>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Coord>& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Coord>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Coord& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Coord& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Coord>& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Coord>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Coord& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Coord& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Coord,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Weather.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Weather>& transform,
               const ::bond::bonded< ::benchmark::Weather>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Weather& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Weather, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Weather>& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Weather>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Weather& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Weather& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Weather& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Weather>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Weather& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Weather>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Weather>& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Weather>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Weather& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Weather& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Weather>& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Weather>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Weather& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Weather& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Weather,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for MainObject.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::MainObject>& transform,
               const ::bond::bonded< ::benchmark::MainObject>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::MainObject& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::MainObject, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::MainObject>& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::MainObject>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::MainObject& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::MainObject& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::MainObject& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::MainObject>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::MainObject& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::MainObject>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::MainObject>& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::MainObject>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::MainObject& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::MainObject& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::MainObject>& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::MainObject>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::MainObject& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::MainObject& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::MainObject,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Wind.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Wind>& transform,
               const ::bond::bonded< ::benchmark::Wind>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Wind& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Wind, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Wind>& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Wind>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Wind& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Wind& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Wind& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Wind>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Wind& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Wind>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Wind>& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Wind>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Wind& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Wind& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Wind>& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Wind>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Wind& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Wind& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Wind,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Clouds.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Clouds>& transform,
               const ::bond::bonded< ::benchmark::Clouds>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Clouds& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Clouds, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Clouds>& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Clouds>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Clouds& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Clouds& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Clouds& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Clouds>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Clouds& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Clouds>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Clouds>& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Clouds>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Clouds& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Clouds& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Clouds>& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Clouds>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Clouds& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Clouds& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Clouds,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Sys.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Sys>& transform,
               const ::bond::bonded< ::benchmark::Sys>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Sys& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Sys, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Sys>& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Sys>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Sys& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Sys& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Sys& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Sys>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Sys& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Sys>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Sys>& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Sys>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Sys& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Sys& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Sys>& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Sys>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Sys& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Sys& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Sys,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Main.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Main, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
} // namespace bond
