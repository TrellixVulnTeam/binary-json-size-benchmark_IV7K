
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/openweathermap/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Coord
    //
    struct Coord::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_lon_metadata;
        private: static const ::bond::Metadata s_lat_metadata;

        public: struct var
        {
            // lon
            typedef struct lon_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Coord,
                double,
                &Coord::lon,
                &s_lon_metadata
            > {} lon;
        
            // lat
            typedef struct lat_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Coord,
                double,
                &Coord::lat,
                &s_lat_metadata
            > {} lat;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::lat>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::lon>::type fields2;

        public: typedef fields2::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Coord", "benchmark.Coord",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Weather
    //
    struct Weather::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_id_metadata;
        private: static const ::bond::Metadata s_main_metadata;
        private: static const ::bond::Metadata s_description_metadata;
        private: static const ::bond::Metadata s_icon_metadata;

        public: struct var
        {
            // id
            typedef struct id_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Weather,
                uint16_t,
                &Weather::id,
                &s_id_metadata
            > {} id;
        
            // main
            typedef struct main_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Weather,
                std::string,
                &Weather::main,
                &s_main_metadata
            > {} main;
        
            // description
            typedef struct description_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Weather,
                std::string,
                &Weather::description,
                &s_description_metadata
            > {} description;
        
            // icon
            typedef struct icon_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Weather,
                std::string,
                &Weather::icon,
                &s_icon_metadata
            > {} icon;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::icon>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::description>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::main>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::id>::type fields4;

        public: typedef fields4::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Weather", "benchmark.Weather",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // MainObject
    //
    struct MainObject::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_temp_metadata;
        private: static const ::bond::Metadata s_feels_like_metadata;
        private: static const ::bond::Metadata s_temp_min_metadata;
        private: static const ::bond::Metadata s_temp_max_metadata;
        private: static const ::bond::Metadata s_pressure_metadata;
        private: static const ::bond::Metadata s_humidity_metadata;

        public: struct var
        {
            // temp
            typedef struct temp_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                MainObject,
                double,
                &MainObject::temp,
                &s_temp_metadata
            > {} temp;
        
            // feels_like
            typedef struct feels_like_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                MainObject,
                double,
                &MainObject::feels_like,
                &s_feels_like_metadata
            > {} feels_like;
        
            // temp_min
            typedef struct temp_min_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                MainObject,
                double,
                &MainObject::temp_min,
                &s_temp_min_metadata
            > {} temp_min;
        
            // temp_max
            typedef struct temp_max_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                MainObject,
                double,
                &MainObject::temp_max,
                &s_temp_max_metadata
            > {} temp_max;
        
            // pressure
            typedef struct pressure_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                MainObject,
                uint16_t,
                &MainObject::pressure,
                &s_pressure_metadata
            > {} pressure;
        
            // humidity
            typedef struct humidity_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                MainObject,
                uint8_t,
                &MainObject::humidity,
                &s_humidity_metadata
            > {} humidity;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::humidity>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::pressure>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::temp_max>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::temp_min>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::feels_like>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::temp>::type fields6;

        public: typedef fields6::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("MainObject", "benchmark.MainObject",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Wind
    //
    struct Wind::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_speed_metadata;
        private: static const ::bond::Metadata s_deg_metadata;

        public: struct var
        {
            // speed
            typedef struct speed_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Wind,
                double,
                &Wind::speed,
                &s_speed_metadata
            > {} speed;
        
            // deg
            typedef struct deg_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Wind,
                uint16_t,
                &Wind::deg,
                &s_deg_metadata
            > {} deg;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::deg>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::speed>::type fields2;

        public: typedef fields2::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Wind", "benchmark.Wind",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Clouds
    //
    struct Clouds::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_all_metadata;

        public: struct var
        {
            // all
            typedef struct all_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Clouds,
                uint8_t,
                &Clouds::all,
                &s_all_metadata
            > {} all;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::all>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Clouds", "benchmark.Clouds",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Sys
    //
    struct Sys::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_type_metadata;
        private: static const ::bond::Metadata s_id_metadata;
        private: static const ::bond::Metadata s_message_metadata;
        private: static const ::bond::Metadata s_country_metadata;
        private: static const ::bond::Metadata s_sunrise_metadata;
        private: static const ::bond::Metadata s_sunset_metadata;

        public: struct var
        {
            // type
            typedef struct type_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Sys,
                uint8_t,
                &Sys::type,
                &s_type_metadata
            > {} type;
        
            // id
            typedef struct id_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Sys,
                uint16_t,
                &Sys::id,
                &s_id_metadata
            > {} id;
        
            // message
            typedef struct message_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Sys,
                double,
                &Sys::message,
                &s_message_metadata
            > {} message;
        
            // country
            typedef struct country_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Sys,
                std::string,
                &Sys::country,
                &s_country_metadata
            > {} country;
        
            // sunrise
            typedef struct sunrise_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Sys,
                uint32_t,
                &Sys::sunrise,
                &s_sunrise_metadata
            > {} sunrise;
        
            // sunset
            typedef struct sunset_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Sys,
                uint32_t,
                &Sys::sunset,
                &s_sunset_metadata
            > {} sunset;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::sunset>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::sunrise>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::country>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::message>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::id>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::type>::type fields6;

        public: typedef fields6::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Sys", "benchmark.Sys",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_coord_metadata;
        private: static const ::bond::Metadata s_weather_metadata;
        private: static const ::bond::Metadata s_base_metadata;
        private: static const ::bond::Metadata s_main_metadata;
        private: static const ::bond::Metadata s_visibility_metadata;
        private: static const ::bond::Metadata s_wind_metadata;
        private: static const ::bond::Metadata s_clouds_metadata;
        private: static const ::bond::Metadata s_dt_metadata;
        private: static const ::bond::Metadata s_sys_metadata;
        private: static const ::bond::Metadata s_timezone_metadata;
        private: static const ::bond::Metadata s_id_metadata;
        private: static const ::bond::Metadata s_name_metadata;
        private: static const ::bond::Metadata s_cod_metadata;

        public: struct var
        {
            // coord
            typedef struct coord_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Coord,
                &Main::coord,
                &s_coord_metadata
            > {} coord;
        
            // weather
            typedef struct weather_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Weather>,
                &Main::weather,
                &s_weather_metadata
            > {} weather;
        
            // base
            typedef struct base_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::base,
                &s_base_metadata
            > {} base;
        
            // main
            typedef struct main_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::MainObject,
                &Main::main,
                &s_main_metadata
            > {} main;
        
            // visibility
            typedef struct visibility_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Main,
                uint16_t,
                &Main::visibility,
                &s_visibility_metadata
            > {} visibility;
        
            // wind
            typedef struct wind_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Wind,
                &Main::wind,
                &s_wind_metadata
            > {} wind;
        
            // clouds
            typedef struct clouds_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Clouds,
                &Main::clouds,
                &s_clouds_metadata
            > {} clouds;
        
            // dt
            typedef struct dt_type : ::bond::reflection::FieldTemplate<
                7,
                ::bond::reflection::required_field_modifier,
                Main,
                uint32_t,
                &Main::dt,
                &s_dt_metadata
            > {} dt;
        
            // sys
            typedef struct sys_type : ::bond::reflection::FieldTemplate<
                8,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Sys,
                &Main::sys,
                &s_sys_metadata
            > {} sys;
        
            // timezone
            typedef struct timezone_type : ::bond::reflection::FieldTemplate<
                9,
                ::bond::reflection::required_field_modifier,
                Main,
                int32_t,
                &Main::timezone,
                &s_timezone_metadata
            > {} timezone;
        
            // id
            typedef struct id_type : ::bond::reflection::FieldTemplate<
                10,
                ::bond::reflection::required_field_modifier,
                Main,
                uint32_t,
                &Main::id,
                &s_id_metadata
            > {} id;
        
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                11,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::name,
                &s_name_metadata
            > {} name;
        
            // cod
            typedef struct cod_type : ::bond::reflection::FieldTemplate<
                12,
                ::bond::reflection::required_field_modifier,
                Main,
                uint8_t,
                &Main::cod,
                &s_cod_metadata
            > {} cod;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::cod>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::name>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::id>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::timezone>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::sys>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::dt>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::clouds>::type fields7;
        private: typedef boost::mpl::push_front<fields7, var::wind>::type fields8;
        private: typedef boost::mpl::push_front<fields8, var::visibility>::type fields9;
        private: typedef boost::mpl::push_front<fields9, var::main>::type fields10;
        private: typedef boost::mpl::push_front<fields10, var::base>::type fields11;
        private: typedef boost::mpl::push_front<fields11, var::weather>::type fields12;
        private: typedef boost::mpl::push_front<fields12, var::coord>::type fields13;

        public: typedef fields13::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
