
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/packagejson/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Author
    //
    struct Author::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_name_metadata;
        private: static const ::bond::Metadata s_url_metadata;

        public: struct var
        {
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Author,
                std::string,
                &Author::name,
                &s_name_metadata
            > {} name;
        
            // url
            typedef struct url_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Author,
                std::string,
                &Author::url,
                &s_url_metadata
            > {} url;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::url>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::name>::type fields2;

        public: typedef fields2::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Author", "benchmark.Author",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Repository
    //
    struct Repository::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_type_metadata;
        private: static const ::bond::Metadata s_url_metadata;

        public: struct var
        {
            // type
            typedef struct type_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Repository,
                std::string,
                &Repository::type,
                &s_type_metadata
            > {} type;
        
            // url
            typedef struct url_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Repository,
                std::string,
                &Repository::url,
                &s_url_metadata
            > {} url;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::url>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::type>::type fields2;

        public: typedef fields2::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Repository", "benchmark.Repository",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Bugs
    //
    struct Bugs::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_url_metadata;

        public: struct var
        {
            // url
            typedef struct url_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Bugs,
                std::string,
                &Bugs::url,
                &s_url_metadata
            > {} url;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::url>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Bugs", "benchmark.Bugs",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // License
    //
    struct License::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_type_metadata;
        private: static const ::bond::Metadata s_url_metadata;

        public: struct var
        {
            // type
            typedef struct type_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                License,
                std::string,
                &License::type,
                &s_type_metadata
            > {} type;
        
            // url
            typedef struct url_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                License,
                std::string,
                &License::url,
                &s_url_metadata
            > {} url;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::url>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::type>::type fields2;

        public: typedef fields2::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("License", "benchmark.License",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Scripts
    //
    struct Scripts::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_test_metadata;

        public: struct var
        {
            // test
            typedef struct test_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Scripts,
                std::string,
                &Scripts::test,
                &s_test_metadata
            > {} test;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::test>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Scripts", "benchmark.Scripts",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Engines
    //
    struct Engines::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_node_metadata;

        public: struct var
        {
            // node
            typedef struct node_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Engines,
                std::string,
                &Engines::node,
                &s_node_metadata
            > {} node;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::node>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Engines", "benchmark.Engines",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Dependencies
    //
    struct Dependencies::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_async_metadata;
        private: static const ::bond::Metadata s_coffeeScript_metadata;
        private: static const ::bond::Metadata s_colors_metadata;
        private: static const ::bond::Metadata s_dateformat_metadata;
        private: static const ::bond::Metadata s_eventemitter2_metadata;
        private: static const ::bond::Metadata s_findupSync_metadata;
        private: static const ::bond::Metadata s_glob_metadata;
        private: static const ::bond::Metadata s_hooker_metadata;
        private: static const ::bond::Metadata s_iconvLite_metadata;
        private: static const ::bond::Metadata s_minimatch_metadata;
        private: static const ::bond::Metadata s_nopt_metadata;
        private: static const ::bond::Metadata s_rimraf_metadata;
        private: static const ::bond::Metadata s_lodash_metadata;
        private: static const ::bond::Metadata s_underscoreString_metadata;
        private: static const ::bond::Metadata s_which_metadata;
        private: static const ::bond::Metadata s_jsYaml_metadata;
        private: static const ::bond::Metadata s_exit_metadata;
        private: static const ::bond::Metadata s_getobject_metadata;
        private: static const ::bond::Metadata s_gruntLegacyUtil_metadata;
        private: static const ::bond::Metadata s_gruntLegacyLog_metadata;

        public: struct var
        {
            // async
            typedef struct async_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::async,
                &s_async_metadata
            > {} async;
        
            // coffeeScript
            typedef struct coffeeScript_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::coffeeScript,
                &s_coffeeScript_metadata
            > {} coffeeScript;
        
            // colors
            typedef struct colors_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::colors,
                &s_colors_metadata
            > {} colors;
        
            // dateformat
            typedef struct dateformat_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::dateformat,
                &s_dateformat_metadata
            > {} dateformat;
        
            // eventemitter2
            typedef struct eventemitter2_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::eventemitter2,
                &s_eventemitter2_metadata
            > {} eventemitter2;
        
            // findupSync
            typedef struct findupSync_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::findupSync,
                &s_findupSync_metadata
            > {} findupSync;
        
            // glob
            typedef struct glob_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::glob,
                &s_glob_metadata
            > {} glob;
        
            // hooker
            typedef struct hooker_type : ::bond::reflection::FieldTemplate<
                7,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::hooker,
                &s_hooker_metadata
            > {} hooker;
        
            // iconvLite
            typedef struct iconvLite_type : ::bond::reflection::FieldTemplate<
                8,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::iconvLite,
                &s_iconvLite_metadata
            > {} iconvLite;
        
            // minimatch
            typedef struct minimatch_type : ::bond::reflection::FieldTemplate<
                9,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::minimatch,
                &s_minimatch_metadata
            > {} minimatch;
        
            // nopt
            typedef struct nopt_type : ::bond::reflection::FieldTemplate<
                10,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::nopt,
                &s_nopt_metadata
            > {} nopt;
        
            // rimraf
            typedef struct rimraf_type : ::bond::reflection::FieldTemplate<
                11,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::rimraf,
                &s_rimraf_metadata
            > {} rimraf;
        
            // lodash
            typedef struct lodash_type : ::bond::reflection::FieldTemplate<
                12,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::lodash,
                &s_lodash_metadata
            > {} lodash;
        
            // underscoreString
            typedef struct underscoreString_type : ::bond::reflection::FieldTemplate<
                13,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::underscoreString,
                &s_underscoreString_metadata
            > {} underscoreString;
        
            // which
            typedef struct which_type : ::bond::reflection::FieldTemplate<
                14,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::which,
                &s_which_metadata
            > {} which;
        
            // jsYaml
            typedef struct jsYaml_type : ::bond::reflection::FieldTemplate<
                15,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::jsYaml,
                &s_jsYaml_metadata
            > {} jsYaml;
        
            // exit
            typedef struct exit_type : ::bond::reflection::FieldTemplate<
                16,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::exit,
                &s_exit_metadata
            > {} exit;
        
            // getobject
            typedef struct getobject_type : ::bond::reflection::FieldTemplate<
                17,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::getobject,
                &s_getobject_metadata
            > {} getobject;
        
            // gruntLegacyUtil
            typedef struct gruntLegacyUtil_type : ::bond::reflection::FieldTemplate<
                18,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::gruntLegacyUtil,
                &s_gruntLegacyUtil_metadata
            > {} gruntLegacyUtil;
        
            // gruntLegacyLog
            typedef struct gruntLegacyLog_type : ::bond::reflection::FieldTemplate<
                19,
                ::bond::reflection::required_field_modifier,
                Dependencies,
                std::string,
                &Dependencies::gruntLegacyLog,
                &s_gruntLegacyLog_metadata
            > {} gruntLegacyLog;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::gruntLegacyLog>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::gruntLegacyUtil>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::getobject>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::exit>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::jsYaml>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::which>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::underscoreString>::type fields7;
        private: typedef boost::mpl::push_front<fields7, var::lodash>::type fields8;
        private: typedef boost::mpl::push_front<fields8, var::rimraf>::type fields9;
        private: typedef boost::mpl::push_front<fields9, var::nopt>::type fields10;
        private: typedef boost::mpl::push_front<fields10, var::minimatch>::type fields11;
        private: typedef boost::mpl::push_front<fields11, var::iconvLite>::type fields12;
        private: typedef boost::mpl::push_front<fields12, var::hooker>::type fields13;
        private: typedef boost::mpl::push_front<fields13, var::glob>::type fields14;
        private: typedef boost::mpl::push_front<fields14, var::findupSync>::type fields15;
        private: typedef boost::mpl::push_front<fields15, var::eventemitter2>::type fields16;
        private: typedef boost::mpl::push_front<fields16, var::dateformat>::type fields17;
        private: typedef boost::mpl::push_front<fields17, var::colors>::type fields18;
        private: typedef boost::mpl::push_front<fields18, var::coffeeScript>::type fields19;
        private: typedef boost::mpl::push_front<fields19, var::async>::type fields20;

        public: typedef fields20::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Dependencies", "benchmark.Dependencies",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // DevDependencies
    //
    struct DevDependencies::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_temporary_metadata;
        private: static const ::bond::Metadata s_gruntContribJshint_metadata;
        private: static const ::bond::Metadata s_gruntContribNodeunit_metadata;
        private: static const ::bond::Metadata s_gruntContribWatch_metadata;
        private: static const ::bond::Metadata s_difflet_metadata;
        private: static const ::bond::Metadata s_semver_metadata;
        private: static const ::bond::Metadata s_shelljs_metadata;

        public: struct var
        {
            // temporary
            typedef struct temporary_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                DevDependencies,
                std::string,
                &DevDependencies::temporary,
                &s_temporary_metadata
            > {} temporary;
        
            // gruntContribJshint
            typedef struct gruntContribJshint_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                DevDependencies,
                std::string,
                &DevDependencies::gruntContribJshint,
                &s_gruntContribJshint_metadata
            > {} gruntContribJshint;
        
            // gruntContribNodeunit
            typedef struct gruntContribNodeunit_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                DevDependencies,
                std::string,
                &DevDependencies::gruntContribNodeunit,
                &s_gruntContribNodeunit_metadata
            > {} gruntContribNodeunit;
        
            // gruntContribWatch
            typedef struct gruntContribWatch_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                DevDependencies,
                std::string,
                &DevDependencies::gruntContribWatch,
                &s_gruntContribWatch_metadata
            > {} gruntContribWatch;
        
            // difflet
            typedef struct difflet_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                DevDependencies,
                std::string,
                &DevDependencies::difflet,
                &s_difflet_metadata
            > {} difflet;
        
            // semver
            typedef struct semver_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                DevDependencies,
                std::string,
                &DevDependencies::semver,
                &s_semver_metadata
            > {} semver;
        
            // shelljs
            typedef struct shelljs_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                DevDependencies,
                std::string,
                &DevDependencies::shelljs,
                &s_shelljs_metadata
            > {} shelljs;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::shelljs>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::semver>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::difflet>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::gruntContribWatch>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::gruntContribNodeunit>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::gruntContribJshint>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::temporary>::type fields7;

        public: typedef fields7::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("DevDependencies", "benchmark.DevDependencies",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_name_metadata;
        private: static const ::bond::Metadata s_description_metadata;
        private: static const ::bond::Metadata s_version_metadata;
        private: static const ::bond::Metadata s_author_metadata;
        private: static const ::bond::Metadata s_homepage_metadata;
        private: static const ::bond::Metadata s_repository_metadata;
        private: static const ::bond::Metadata s_bugs_metadata;
        private: static const ::bond::Metadata s_licenses_metadata;
        private: static const ::bond::Metadata s_main_metadata;
        private: static const ::bond::Metadata s_scripts_metadata;
        private: static const ::bond::Metadata s_engines_metadata;
        private: static const ::bond::Metadata s_keywords_metadata;
        private: static const ::bond::Metadata s_dependencies_metadata;
        private: static const ::bond::Metadata s_devDependencies_metadata;
        private: static const ::bond::Metadata s_readme_metadata;
        private: static const ::bond::Metadata s__id_metadata;
        private: static const ::bond::Metadata s__from_metadata;

        public: struct var
        {
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::name,
                &s_name_metadata
            > {} name;
        
            // description
            typedef struct description_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::description,
                &s_description_metadata
            > {} description;
        
            // version
            typedef struct version_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::version,
                &s_version_metadata
            > {} version;
        
            // author
            typedef struct author_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Author,
                &Main::author,
                &s_author_metadata
            > {} author;
        
            // homepage
            typedef struct homepage_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::homepage,
                &s_homepage_metadata
            > {} homepage;
        
            // repository
            typedef struct repository_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Repository,
                &Main::repository,
                &s_repository_metadata
            > {} repository;
        
            // bugs
            typedef struct bugs_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Bugs,
                &Main::bugs,
                &s_bugs_metadata
            > {} bugs;
        
            // licenses
            typedef struct licenses_type : ::bond::reflection::FieldTemplate<
                7,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::License>,
                &Main::licenses,
                &s_licenses_metadata
            > {} licenses;
        
            // main
            typedef struct main_type : ::bond::reflection::FieldTemplate<
                8,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::main,
                &s_main_metadata
            > {} main;
        
            // scripts
            typedef struct scripts_type : ::bond::reflection::FieldTemplate<
                9,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Scripts,
                &Main::scripts,
                &s_scripts_metadata
            > {} scripts;
        
            // engines
            typedef struct engines_type : ::bond::reflection::FieldTemplate<
                10,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Engines,
                &Main::engines,
                &s_engines_metadata
            > {} engines;
        
            // keywords
            typedef struct keywords_type : ::bond::reflection::FieldTemplate<
                11,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list<std::string>,
                &Main::keywords,
                &s_keywords_metadata
            > {} keywords;
        
            // dependencies
            typedef struct dependencies_type : ::bond::reflection::FieldTemplate<
                12,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Dependencies,
                &Main::dependencies,
                &s_dependencies_metadata
            > {} dependencies;
        
            // devDependencies
            typedef struct devDependencies_type : ::bond::reflection::FieldTemplate<
                13,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::DevDependencies,
                &Main::devDependencies,
                &s_devDependencies_metadata
            > {} devDependencies;
        
            // readme
            typedef struct readme_type : ::bond::reflection::FieldTemplate<
                14,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::readme,
                &s_readme_metadata
            > {} readme;
        
            // _id
            typedef struct _id_type : ::bond::reflection::FieldTemplate<
                15,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::_id,
                &s__id_metadata
            > {} _id;
        
            // _from
            typedef struct _from_type : ::bond::reflection::FieldTemplate<
                16,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::_from,
                &s__from_metadata
            > {} _from;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::_from>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::_id>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::readme>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::devDependencies>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::dependencies>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::keywords>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::engines>::type fields7;
        private: typedef boost::mpl::push_front<fields7, var::scripts>::type fields8;
        private: typedef boost::mpl::push_front<fields8, var::main>::type fields9;
        private: typedef boost::mpl::push_front<fields9, var::licenses>::type fields10;
        private: typedef boost::mpl::push_front<fields10, var::bugs>::type fields11;
        private: typedef boost::mpl::push_front<fields11, var::repository>::type fields12;
        private: typedef boost::mpl::push_front<fields12, var::homepage>::type fields13;
        private: typedef boost::mpl::push_front<fields13, var::author>::type fields14;
        private: typedef boost::mpl::push_front<fields14, var::version>::type fields15;
        private: typedef boost::mpl::push_front<fields15, var::description>::type fields16;
        private: typedef boost::mpl::push_front<fields16, var::name>::type fields17;

        public: typedef fields17::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
