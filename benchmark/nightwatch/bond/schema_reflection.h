
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/nightwatch/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Globals
    //
    struct Globals::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_abortOnAssertionFailure_metadata;
        private: static const ::bond::Metadata s_abortOnElementLocateError_metadata;
        private: static const ::bond::Metadata s_waitForConditionPollInterval_metadata;
        private: static const ::bond::Metadata s_waitForConditionTimeout_metadata;
        private: static const ::bond::Metadata s_throwOnMultipleElementsReturned_metadata;
        private: static const ::bond::Metadata s_suppressWarningsOnMultipleElementsReturned_metadata;
        private: static const ::bond::Metadata s_asyncHookTimeout_metadata;
        private: static const ::bond::Metadata s_unitTestsTimeout_metadata;
        private: static const ::bond::Metadata s_customReporterCallbackTimeout_metadata;
        private: static const ::bond::Metadata s_retryAssertionTimeout_metadata;

        public: struct var
        {
            // abortOnAssertionFailure
            typedef struct abortOnAssertionFailure_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Globals,
                bool,
                &Globals::abortOnAssertionFailure,
                &s_abortOnAssertionFailure_metadata
            > {} abortOnAssertionFailure;
        
            // abortOnElementLocateError
            typedef struct abortOnElementLocateError_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Globals,
                bool,
                &Globals::abortOnElementLocateError,
                &s_abortOnElementLocateError_metadata
            > {} abortOnElementLocateError;
        
            // waitForConditionPollInterval
            typedef struct waitForConditionPollInterval_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Globals,
                uint16_t,
                &Globals::waitForConditionPollInterval,
                &s_waitForConditionPollInterval_metadata
            > {} waitForConditionPollInterval;
        
            // waitForConditionTimeout
            typedef struct waitForConditionTimeout_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Globals,
                uint16_t,
                &Globals::waitForConditionTimeout,
                &s_waitForConditionTimeout_metadata
            > {} waitForConditionTimeout;
        
            // throwOnMultipleElementsReturned
            typedef struct throwOnMultipleElementsReturned_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Globals,
                bool,
                &Globals::throwOnMultipleElementsReturned,
                &s_throwOnMultipleElementsReturned_metadata
            > {} throwOnMultipleElementsReturned;
        
            // suppressWarningsOnMultipleElementsReturned
            typedef struct suppressWarningsOnMultipleElementsReturned_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Globals,
                bool,
                &Globals::suppressWarningsOnMultipleElementsReturned,
                &s_suppressWarningsOnMultipleElementsReturned_metadata
            > {} suppressWarningsOnMultipleElementsReturned;
        
            // asyncHookTimeout
            typedef struct asyncHookTimeout_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Globals,
                uint16_t,
                &Globals::asyncHookTimeout,
                &s_asyncHookTimeout_metadata
            > {} asyncHookTimeout;
        
            // unitTestsTimeout
            typedef struct unitTestsTimeout_type : ::bond::reflection::FieldTemplate<
                7,
                ::bond::reflection::required_field_modifier,
                Globals,
                uint16_t,
                &Globals::unitTestsTimeout,
                &s_unitTestsTimeout_metadata
            > {} unitTestsTimeout;
        
            // customReporterCallbackTimeout
            typedef struct customReporterCallbackTimeout_type : ::bond::reflection::FieldTemplate<
                8,
                ::bond::reflection::required_field_modifier,
                Globals,
                uint16_t,
                &Globals::customReporterCallbackTimeout,
                &s_customReporterCallbackTimeout_metadata
            > {} customReporterCallbackTimeout;
        
            // retryAssertionTimeout
            typedef struct retryAssertionTimeout_type : ::bond::reflection::FieldTemplate<
                9,
                ::bond::reflection::required_field_modifier,
                Globals,
                uint16_t,
                &Globals::retryAssertionTimeout,
                &s_retryAssertionTimeout_metadata
            > {} retryAssertionTimeout;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::retryAssertionTimeout>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::customReporterCallbackTimeout>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::unitTestsTimeout>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::asyncHookTimeout>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::suppressWarningsOnMultipleElementsReturned>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::throwOnMultipleElementsReturned>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::waitForConditionTimeout>::type fields7;
        private: typedef boost::mpl::push_front<fields7, var::waitForConditionPollInterval>::type fields8;
        private: typedef boost::mpl::push_front<fields8, var::abortOnElementLocateError>::type fields9;
        private: typedef boost::mpl::push_front<fields9, var::abortOnAssertionFailure>::type fields10;

        public: typedef fields10::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Globals", "benchmark.Globals",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Empty
    //
    struct Empty::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        

        public: struct var
        {};

        private: typedef boost::mpl::list<> fields0;
        

        public: typedef fields0::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Empty", "benchmark.Empty",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Selenium
    //
    struct Selenium::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_start_process_metadata;
        private: static const ::bond::Metadata s_cli_args_metadata;
        private: static const ::bond::Metadata s_server_path_metadata;
        private: static const ::bond::Metadata s_log_path_metadata;
        private: static const ::bond::Metadata s_check_process_delay_metadata;
        private: static const ::bond::Metadata s_max_status_poll_tries_metadata;
        private: static const ::bond::Metadata s_status_poll_interval_metadata;

        public: struct var
        {
            // start_process
            typedef struct start_process_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Selenium,
                bool,
                &Selenium::start_process,
                &s_start_process_metadata
            > {} start_process;
        
            // cli_args
            typedef struct cli_args_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Selenium,
                ::benchmark::Empty,
                &Selenium::cli_args,
                &s_cli_args_metadata
            > {} cli_args;
        
            // server_path
            typedef struct server_path_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Selenium,
                ::bond::nullable<std::string>,
                &Selenium::server_path,
                &s_server_path_metadata
            > {} server_path;
        
            // log_path
            typedef struct log_path_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Selenium,
                std::string,
                &Selenium::log_path,
                &s_log_path_metadata
            > {} log_path;
        
            // check_process_delay
            typedef struct check_process_delay_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Selenium,
                uint16_t,
                &Selenium::check_process_delay,
                &s_check_process_delay_metadata
            > {} check_process_delay;
        
            // max_status_poll_tries
            typedef struct max_status_poll_tries_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Selenium,
                uint8_t,
                &Selenium::max_status_poll_tries,
                &s_max_status_poll_tries_metadata
            > {} max_status_poll_tries;
        
            // status_poll_interval
            typedef struct status_poll_interval_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Selenium,
                uint8_t,
                &Selenium::status_poll_interval,
                &s_status_poll_interval_metadata
            > {} status_poll_interval;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::status_poll_interval>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::max_status_poll_tries>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::check_process_delay>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::log_path>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::server_path>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::cli_args>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::start_process>::type fields7;

        public: typedef fields7::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Selenium", "benchmark.Selenium",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // WebDriver
    //
    struct WebDriver::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_start_process_metadata;
        private: static const ::bond::Metadata s_cli_args_metadata;
        private: static const ::bond::Metadata s_server_path_metadata;
        private: static const ::bond::Metadata s_log_path_metadata;
        private: static const ::bond::Metadata s_check_process_delay_metadata;
        private: static const ::bond::Metadata s_max_status_poll_tries_metadata;
        private: static const ::bond::Metadata s_status_poll_interval_metadata;
        private: static const ::bond::Metadata s_process_create_timeout_metadata;
        private: static const ::bond::Metadata s_timeout_options_metadata;

        public: struct var
        {
            // start_process
            typedef struct start_process_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                WebDriver,
                bool,
                &WebDriver::start_process,
                &s_start_process_metadata
            > {} start_process;
        
            // cli_args
            typedef struct cli_args_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                WebDriver,
                ::benchmark::Empty,
                &WebDriver::cli_args,
                &s_cli_args_metadata
            > {} cli_args;
        
            // server_path
            typedef struct server_path_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                WebDriver,
                ::bond::nullable<std::string>,
                &WebDriver::server_path,
                &s_server_path_metadata
            > {} server_path;
        
            // log_path
            typedef struct log_path_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                WebDriver,
                std::string,
                &WebDriver::log_path,
                &s_log_path_metadata
            > {} log_path;
        
            // check_process_delay
            typedef struct check_process_delay_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                WebDriver,
                uint8_t,
                &WebDriver::check_process_delay,
                &s_check_process_delay_metadata
            > {} check_process_delay;
        
            // max_status_poll_tries
            typedef struct max_status_poll_tries_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                WebDriver,
                uint8_t,
                &WebDriver::max_status_poll_tries,
                &s_max_status_poll_tries_metadata
            > {} max_status_poll_tries;
        
            // status_poll_interval
            typedef struct status_poll_interval_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                WebDriver,
                uint8_t,
                &WebDriver::status_poll_interval,
                &s_status_poll_interval_metadata
            > {} status_poll_interval;
        
            // process_create_timeout
            typedef struct process_create_timeout_type : ::bond::reflection::FieldTemplate<
                7,
                ::bond::reflection::required_field_modifier,
                WebDriver,
                uint32_t,
                &WebDriver::process_create_timeout,
                &s_process_create_timeout_metadata
            > {} process_create_timeout;
        
            // timeout_options
            typedef struct timeout_options_type : ::bond::reflection::FieldTemplate<
                8,
                ::bond::reflection::required_field_modifier,
                WebDriver,
                ::benchmark::Empty,
                &WebDriver::timeout_options,
                &s_timeout_options_metadata
            > {} timeout_options;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::timeout_options>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::process_create_timeout>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::status_poll_interval>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::max_status_poll_tries>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::check_process_delay>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::log_path>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::server_path>::type fields7;
        private: typedef boost::mpl::push_front<fields7, var::cli_args>::type fields8;
        private: typedef boost::mpl::push_front<fields8, var::start_process>::type fields9;

        public: typedef fields9::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("WebDriver", "benchmark.WebDriver",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // DesiredCapabilities
    //
    struct DesiredCapabilities::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_browserName_metadata;

        public: struct var
        {
            // browserName
            typedef struct browserName_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                DesiredCapabilities,
                std::string,
                &DesiredCapabilities::browserName,
                &s_browserName_metadata
            > {} browserName;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::browserName>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("DesiredCapabilities", "benchmark.DesiredCapabilities",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_custom_commands_path_metadata;
        private: static const ::bond::Metadata s_custom_assertions_path_metadata;
        private: static const ::bond::Metadata s_page_objects_path_metadata;
        private: static const ::bond::Metadata s_globals_path_metadata;
        private: static const ::bond::Metadata s_globals_metadata;
        private: static const ::bond::Metadata s_dotenv_metadata;
        private: static const ::bond::Metadata s_persist_globals_metadata;
        private: static const ::bond::Metadata s_output_folder_metadata;
        private: static const ::bond::Metadata s_src_folders_metadata;
        private: static const ::bond::Metadata s_live_output_metadata;
        private: static const ::bond::Metadata s_disable_colors_metadata;
        private: static const ::bond::Metadata s_parallel_process_delay_metadata;
        private: static const ::bond::Metadata s_selenium_metadata;
        private: static const ::bond::Metadata s_start_session_metadata;
        private: static const ::bond::Metadata s_end_session_on_fail_metadata;
        private: static const ::bond::Metadata s_test_workers_metadata;
        private: static const ::bond::Metadata s_test_runner_metadata;
        private: static const ::bond::Metadata s_webdriver_metadata;
        private: static const ::bond::Metadata s_test_settings_metadata;
        private: static const ::bond::Metadata s_launch_url_metadata;
        private: static const ::bond::Metadata s_silent_metadata;
        private: static const ::bond::Metadata s_output_metadata;
        private: static const ::bond::Metadata s_detailed_output_metadata;
        private: static const ::bond::Metadata s_output_timestamp_metadata;
        private: static const ::bond::Metadata s_disable_error_log_metadata;
        private: static const ::bond::Metadata s_screenshots_metadata;
        private: static const ::bond::Metadata s_log_screenshot_data_metadata;
        private: static const ::bond::Metadata s_desiredCapabilities_metadata;
        private: static const ::bond::Metadata s_exclude_metadata;
        private: static const ::bond::Metadata s_filter_metadata;
        private: static const ::bond::Metadata s_skipgroup_metadata;
        private: static const ::bond::Metadata s_sync_test_names_metadata;
        private: static const ::bond::Metadata s_skiptags_metadata;
        private: static const ::bond::Metadata s_use_xpath_metadata;
        private: static const ::bond::Metadata s_parallel_mode_metadata;
        private: static const ::bond::Metadata s_report_prefix_metadata;
        private: static const ::bond::Metadata s_unit_tests_mode_metadata;
        private: static const ::bond::Metadata s_default_reporter_metadata;

        public: struct var
        {
            // custom_commands_path
            typedef struct custom_commands_path_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::custom_commands_path,
                &s_custom_commands_path_metadata
            > {} custom_commands_path;
        
            // custom_assertions_path
            typedef struct custom_assertions_path_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::custom_assertions_path,
                &s_custom_assertions_path_metadata
            > {} custom_assertions_path;
        
            // page_objects_path
            typedef struct page_objects_path_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::page_objects_path,
                &s_page_objects_path_metadata
            > {} page_objects_path;
        
            // globals_path
            typedef struct globals_path_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::globals_path,
                &s_globals_path_metadata
            > {} globals_path;
        
            // globals
            typedef struct globals_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Globals,
                &Main::globals,
                &s_globals_metadata
            > {} globals;
        
            // dotenv
            typedef struct dotenv_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Empty,
                &Main::dotenv,
                &s_dotenv_metadata
            > {} dotenv;
        
            // persist_globals
            typedef struct persist_globals_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::persist_globals,
                &s_persist_globals_metadata
            > {} persist_globals;
        
            // output_folder
            typedef struct output_folder_type : ::bond::reflection::FieldTemplate<
                7,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::output_folder,
                &s_output_folder_metadata
            > {} output_folder;
        
            // src_folders
            typedef struct src_folders_type : ::bond::reflection::FieldTemplate<
                8,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::src_folders,
                &s_src_folders_metadata
            > {} src_folders;
        
            // live_output
            typedef struct live_output_type : ::bond::reflection::FieldTemplate<
                9,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::live_output,
                &s_live_output_metadata
            > {} live_output;
        
            // disable_colors
            typedef struct disable_colors_type : ::bond::reflection::FieldTemplate<
                10,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::disable_colors,
                &s_disable_colors_metadata
            > {} disable_colors;
        
            // parallel_process_delay
            typedef struct parallel_process_delay_type : ::bond::reflection::FieldTemplate<
                11,
                ::bond::reflection::required_field_modifier,
                Main,
                uint8_t,
                &Main::parallel_process_delay,
                &s_parallel_process_delay_metadata
            > {} parallel_process_delay;
        
            // selenium
            typedef struct selenium_type : ::bond::reflection::FieldTemplate<
                12,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Selenium,
                &Main::selenium,
                &s_selenium_metadata
            > {} selenium;
        
            // start_session
            typedef struct start_session_type : ::bond::reflection::FieldTemplate<
                13,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::start_session,
                &s_start_session_metadata
            > {} start_session;
        
            // end_session_on_fail
            typedef struct end_session_on_fail_type : ::bond::reflection::FieldTemplate<
                14,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::end_session_on_fail,
                &s_end_session_on_fail_metadata
            > {} end_session_on_fail;
        
            // test_workers
            typedef struct test_workers_type : ::bond::reflection::FieldTemplate<
                15,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::test_workers,
                &s_test_workers_metadata
            > {} test_workers;
        
            // test_runner
            typedef struct test_runner_type : ::bond::reflection::FieldTemplate<
                16,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::test_runner,
                &s_test_runner_metadata
            > {} test_runner;
        
            // webdriver
            typedef struct webdriver_type : ::bond::reflection::FieldTemplate<
                17,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::WebDriver,
                &Main::webdriver,
                &s_webdriver_metadata
            > {} webdriver;
        
            // test_settings
            typedef struct test_settings_type : ::bond::reflection::FieldTemplate<
                18,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Empty,
                &Main::test_settings,
                &s_test_settings_metadata
            > {} test_settings;
        
            // launch_url
            typedef struct launch_url_type : ::bond::reflection::FieldTemplate<
                19,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::launch_url,
                &s_launch_url_metadata
            > {} launch_url;
        
            // silent
            typedef struct silent_type : ::bond::reflection::FieldTemplate<
                20,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::silent,
                &s_silent_metadata
            > {} silent;
        
            // output
            typedef struct output_type : ::bond::reflection::FieldTemplate<
                21,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::output,
                &s_output_metadata
            > {} output;
        
            // detailed_output
            typedef struct detailed_output_type : ::bond::reflection::FieldTemplate<
                22,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::detailed_output,
                &s_detailed_output_metadata
            > {} detailed_output;
        
            // output_timestamp
            typedef struct output_timestamp_type : ::bond::reflection::FieldTemplate<
                23,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::output_timestamp,
                &s_output_timestamp_metadata
            > {} output_timestamp;
        
            // disable_error_log
            typedef struct disable_error_log_type : ::bond::reflection::FieldTemplate<
                24,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::disable_error_log,
                &s_disable_error_log_metadata
            > {} disable_error_log;
        
            // screenshots
            typedef struct screenshots_type : ::bond::reflection::FieldTemplate<
                25,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::screenshots,
                &s_screenshots_metadata
            > {} screenshots;
        
            // log_screenshot_data
            typedef struct log_screenshot_data_type : ::bond::reflection::FieldTemplate<
                26,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::log_screenshot_data,
                &s_log_screenshot_data_metadata
            > {} log_screenshot_data;
        
            // desiredCapabilities
            typedef struct desiredCapabilities_type : ::bond::reflection::FieldTemplate<
                27,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::DesiredCapabilities,
                &Main::desiredCapabilities,
                &s_desiredCapabilities_metadata
            > {} desiredCapabilities;
        
            // exclude
            typedef struct exclude_type : ::bond::reflection::FieldTemplate<
                28,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::exclude,
                &s_exclude_metadata
            > {} exclude;
        
            // filter
            typedef struct filter_type : ::bond::reflection::FieldTemplate<
                29,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::filter,
                &s_filter_metadata
            > {} filter;
        
            // skipgroup
            typedef struct skipgroup_type : ::bond::reflection::FieldTemplate<
                30,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::skipgroup,
                &s_skipgroup_metadata
            > {} skipgroup;
        
            // sync_test_names
            typedef struct sync_test_names_type : ::bond::reflection::FieldTemplate<
                31,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::sync_test_names,
                &s_sync_test_names_metadata
            > {} sync_test_names;
        
            // skiptags
            typedef struct skiptags_type : ::bond::reflection::FieldTemplate<
                32,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::skiptags,
                &s_skiptags_metadata
            > {} skiptags;
        
            // use_xpath
            typedef struct use_xpath_type : ::bond::reflection::FieldTemplate<
                33,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::use_xpath,
                &s_use_xpath_metadata
            > {} use_xpath;
        
            // parallel_mode
            typedef struct parallel_mode_type : ::bond::reflection::FieldTemplate<
                34,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::parallel_mode,
                &s_parallel_mode_metadata
            > {} parallel_mode;
        
            // report_prefix
            typedef struct report_prefix_type : ::bond::reflection::FieldTemplate<
                35,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::report_prefix,
                &s_report_prefix_metadata
            > {} report_prefix;
        
            // unit_tests_mode
            typedef struct unit_tests_mode_type : ::bond::reflection::FieldTemplate<
                36,
                ::bond::reflection::required_field_modifier,
                Main,
                bool,
                &Main::unit_tests_mode,
                &s_unit_tests_mode_metadata
            > {} unit_tests_mode;
        
            // default_reporter
            typedef struct default_reporter_type : ::bond::reflection::FieldTemplate<
                37,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::default_reporter,
                &s_default_reporter_metadata
            > {} default_reporter;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::default_reporter>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::unit_tests_mode>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::report_prefix>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::parallel_mode>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::use_xpath>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::skiptags>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::sync_test_names>::type fields7;
        private: typedef boost::mpl::push_front<fields7, var::skipgroup>::type fields8;
        private: typedef boost::mpl::push_front<fields8, var::filter>::type fields9;
        private: typedef boost::mpl::push_front<fields9, var::exclude>::type fields10;
        private: typedef boost::mpl::push_front<fields10, var::desiredCapabilities>::type fields11;
        private: typedef boost::mpl::push_front<fields11, var::log_screenshot_data>::type fields12;
        private: typedef boost::mpl::push_front<fields12, var::screenshots>::type fields13;
        private: typedef boost::mpl::push_front<fields13, var::disable_error_log>::type fields14;
        private: typedef boost::mpl::push_front<fields14, var::output_timestamp>::type fields15;
        private: typedef boost::mpl::push_front<fields15, var::detailed_output>::type fields16;
        private: typedef boost::mpl::push_front<fields16, var::output>::type fields17;
        private: typedef boost::mpl::push_front<fields17, var::silent>::type fields18;
        private: typedef boost::mpl::push_front<fields18, var::launch_url>::type fields19;
        private: typedef boost::mpl::push_front<fields19, var::test_settings>::type fields20;
        private: typedef boost::mpl::push_front<fields20, var::webdriver>::type fields21;
        private: typedef boost::mpl::push_front<fields21, var::test_runner>::type fields22;
        private: typedef boost::mpl::push_front<fields22, var::test_workers>::type fields23;
        private: typedef boost::mpl::push_front<fields23, var::end_session_on_fail>::type fields24;
        private: typedef boost::mpl::push_front<fields24, var::start_session>::type fields25;
        private: typedef boost::mpl::push_front<fields25, var::selenium>::type fields26;
        private: typedef boost::mpl::push_front<fields26, var::parallel_process_delay>::type fields27;
        private: typedef boost::mpl::push_front<fields27, var::disable_colors>::type fields28;
        private: typedef boost::mpl::push_front<fields28, var::live_output>::type fields29;
        private: typedef boost::mpl::push_front<fields29, var::src_folders>::type fields30;
        private: typedef boost::mpl::push_front<fields30, var::output_folder>::type fields31;
        private: typedef boost::mpl::push_front<fields31, var::persist_globals>::type fields32;
        private: typedef boost::mpl::push_front<fields32, var::dotenv>::type fields33;
        private: typedef boost::mpl::push_front<fields33, var::globals>::type fields34;
        private: typedef boost::mpl::push_front<fields34, var::globals_path>::type fields35;
        private: typedef boost::mpl::push_front<fields35, var::page_objects_path>::type fields36;
        private: typedef boost::mpl::push_front<fields36, var::custom_assertions_path>::type fields37;
        private: typedef boost::mpl::push_front<fields37, var::custom_commands_path>::type fields38;

        public: typedef fields38::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
