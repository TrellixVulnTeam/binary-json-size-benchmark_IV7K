
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/nightwatch/bond/schema.bond
//   Output filename: schema_apply.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/bond.h>
#include <bond/stream/output_buffer.h>


namespace bond
{
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Globals.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Globals>& transform,
               const ::bond::bonded< ::benchmark::Globals>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Globals& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Globals, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Globals>& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Globals>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Globals& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Globals& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Globals& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Globals>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Globals& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Globals>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Globals>& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Globals>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Globals& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Globals& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Globals>& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Globals>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Globals& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Globals& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Globals,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Empty.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Empty>& transform,
               const ::bond::bonded< ::benchmark::Empty>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Empty& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Empty, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Empty>& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Empty>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Empty& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Empty& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Empty& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Empty>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Empty& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Empty>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Empty>& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Empty>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Empty& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Empty& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Empty>& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Empty>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Empty& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Empty& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Empty,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Selenium.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Selenium>& transform,
               const ::bond::bonded< ::benchmark::Selenium>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Selenium& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Selenium, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Selenium>& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Selenium>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Selenium& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Selenium& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Selenium& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Selenium>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Selenium& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Selenium>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Selenium>& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Selenium>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Selenium& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Selenium& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Selenium>& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Selenium>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Selenium& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Selenium& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Selenium,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for WebDriver.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::WebDriver>& transform,
               const ::bond::bonded< ::benchmark::WebDriver>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::WebDriver& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::WebDriver, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::WebDriver>& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::WebDriver>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::WebDriver& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::WebDriver& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::WebDriver& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::WebDriver>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::WebDriver& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::WebDriver>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::WebDriver>& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::WebDriver>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::WebDriver& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::WebDriver& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::WebDriver>& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::WebDriver>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::WebDriver& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::WebDriver& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::WebDriver,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for DesiredCapabilities.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::DesiredCapabilities>& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::DesiredCapabilities& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::DesiredCapabilities>& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::DesiredCapabilities>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::DesiredCapabilities& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::DesiredCapabilities& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::DesiredCapabilities& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::DesiredCapabilities& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::DesiredCapabilities>& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::DesiredCapabilities>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::DesiredCapabilities& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::DesiredCapabilities& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::DesiredCapabilities>& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::DesiredCapabilities>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::DesiredCapabilities& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::DesiredCapabilities& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::DesiredCapabilities,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Main.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Main, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
} // namespace bond
