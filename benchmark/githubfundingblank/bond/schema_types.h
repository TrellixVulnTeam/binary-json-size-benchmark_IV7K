
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/githubfundingblank/bond/schema.bond
//   Output filename: schema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x0902
#error This file was generated by a newer version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0c10
#error This file was generated by an older version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>
#include <bond/core/nullable.h>


namespace benchmark
{
    
    struct Main
    {
        std::string github;
        ::bond::nullable<std::string> patreon;
        ::bond::nullable<std::string> open_collective;
        ::bond::nullable<std::string> ko_fi;
        ::bond::nullable<std::string> tidelift;
        ::bond::nullable<std::string> community_bridge;
        ::bond::nullable<std::string> liberapay;
        ::bond::nullable<std::string> issuehunt;
        ::bond::nullable<std::string> otechie;
        ::bond::nullable<std::string> custom;
        
        Main()
        {
        }

        
        // Compiler generated copy ctor OK
        Main(const Main&) = default;
        
        Main(Main&&) = default;
        
        
        // Compiler generated operator= OK
        Main& operator=(const Main&) = default;
        Main& operator=(Main&&) = default;

        bool operator==(const Main& other) const
        {
            return true
                && (github == other.github)
                && (patreon == other.patreon)
                && (open_collective == other.open_collective)
                && (ko_fi == other.ko_fi)
                && (tidelift == other.tidelift)
                && (community_bridge == other.community_bridge)
                && (liberapay == other.liberapay)
                && (issuehunt == other.issuehunt)
                && (otechie == other.otechie)
                && (custom == other.custom);
        }

        bool operator!=(const Main& other) const
        {
            return !(*this == other);
        }

        void swap(Main& other)
        {
            using std::swap;
            swap(github, other.github);
            swap(patreon, other.patreon);
            swap(open_collective, other.open_collective);
            swap(ko_fi, other.ko_fi);
            swap(tidelift, other.tidelift);
            swap(community_bridge, other.community_bridge);
            swap(liberapay, other.liberapay);
            swap(issuehunt, other.issuehunt);
            swap(otechie, other.otechie);
            swap(custom, other.custom);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Main& left, ::benchmark::Main& right)
    {
        left.swap(right);
    }
} // namespace benchmark
