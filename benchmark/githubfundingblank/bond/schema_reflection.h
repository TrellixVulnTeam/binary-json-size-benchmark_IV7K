
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/githubfundingblank/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_github_metadata;
        private: static const ::bond::Metadata s_patreon_metadata;
        private: static const ::bond::Metadata s_open_collective_metadata;
        private: static const ::bond::Metadata s_ko_fi_metadata;
        private: static const ::bond::Metadata s_tidelift_metadata;
        private: static const ::bond::Metadata s_community_bridge_metadata;
        private: static const ::bond::Metadata s_liberapay_metadata;
        private: static const ::bond::Metadata s_issuehunt_metadata;
        private: static const ::bond::Metadata s_otechie_metadata;
        private: static const ::bond::Metadata s_custom_metadata;

        public: struct var
        {
            // github
            typedef struct github_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                std::string,
                &Main::github,
                &s_github_metadata
            > {} github;
        
            // patreon
            typedef struct patreon_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::patreon,
                &s_patreon_metadata
            > {} patreon;
        
            // open_collective
            typedef struct open_collective_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::open_collective,
                &s_open_collective_metadata
            > {} open_collective;
        
            // ko_fi
            typedef struct ko_fi_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::ko_fi,
                &s_ko_fi_metadata
            > {} ko_fi;
        
            // tidelift
            typedef struct tidelift_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::tidelift,
                &s_tidelift_metadata
            > {} tidelift;
        
            // community_bridge
            typedef struct community_bridge_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::community_bridge,
                &s_community_bridge_metadata
            > {} community_bridge;
        
            // liberapay
            typedef struct liberapay_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::liberapay,
                &s_liberapay_metadata
            > {} liberapay;
        
            // issuehunt
            typedef struct issuehunt_type : ::bond::reflection::FieldTemplate<
                7,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::issuehunt,
                &s_issuehunt_metadata
            > {} issuehunt;
        
            // otechie
            typedef struct otechie_type : ::bond::reflection::FieldTemplate<
                8,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::otechie,
                &s_otechie_metadata
            > {} otechie;
        
            // custom
            typedef struct custom_type : ::bond::reflection::FieldTemplate<
                9,
                ::bond::reflection::required_field_modifier,
                Main,
                ::bond::nullable<std::string>,
                &Main::custom,
                &s_custom_metadata
            > {} custom;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::custom>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::otechie>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::issuehunt>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::liberapay>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::community_bridge>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::tidelift>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::ko_fi>::type fields7;
        private: typedef boost::mpl::push_front<fields7, var::open_collective>::type fields8;
        private: typedef boost::mpl::push_front<fields8, var::patreon>::type fields9;
        private: typedef boost::mpl::push_front<fields9, var::github>::type fields10;

        public: typedef fields10::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
