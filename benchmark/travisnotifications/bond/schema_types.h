
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/travisnotifications/bond/schema.bond
//   Output filename: schema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x0902
#error This file was generated by a newer version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0c10
#error This file was generated by an older version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>



namespace benchmark
{
    
    struct Notification
    {
        std::string secure;
        
        Notification()
        {
        }

        
        // Compiler generated copy ctor OK
        Notification(const Notification&) = default;
        
        Notification(Notification&&) = default;
        
        
        // Compiler generated operator= OK
        Notification& operator=(const Notification&) = default;
        Notification& operator=(Notification&&) = default;

        bool operator==(const Notification& other) const
        {
            return true
                && (secure == other.secure);
        }

        bool operator!=(const Notification& other) const
        {
            return !(*this == other);
        }

        void swap(Notification& other)
        {
            using std::swap;
            swap(secure, other.secure);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Notification& left, ::benchmark::Notification& right)
    {
        left.swap(right);
    }

    
    struct Notifications
    {
        ::benchmark::Notification campfire;
        ::benchmark::Notification irc;
        ::benchmark::Notification flowdock;
        ::benchmark::Notification hipchat;
        ::benchmark::Notification slack;
        ::benchmark::Notification webhooks;
        ::benchmark::Notification email;
        
        Notifications()
        {
        }

        
        // Compiler generated copy ctor OK
        Notifications(const Notifications&) = default;
        
        Notifications(Notifications&&) = default;
        
        
        // Compiler generated operator= OK
        Notifications& operator=(const Notifications&) = default;
        Notifications& operator=(Notifications&&) = default;

        bool operator==(const Notifications& other) const
        {
            return true
                && (campfire == other.campfire)
                && (irc == other.irc)
                && (flowdock == other.flowdock)
                && (hipchat == other.hipchat)
                && (slack == other.slack)
                && (webhooks == other.webhooks)
                && (email == other.email);
        }

        bool operator!=(const Notifications& other) const
        {
            return !(*this == other);
        }

        void swap(Notifications& other)
        {
            using std::swap;
            swap(campfire, other.campfire);
            swap(irc, other.irc);
            swap(flowdock, other.flowdock);
            swap(hipchat, other.hipchat);
            swap(slack, other.slack);
            swap(webhooks, other.webhooks);
            swap(email, other.email);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Notifications& left, ::benchmark::Notifications& right)
    {
        left.swap(right);
    }

    
    struct Main
    {
        ::benchmark::Notifications notifications;
        
        Main()
        {
        }

        
        // Compiler generated copy ctor OK
        Main(const Main&) = default;
        
        Main(Main&&) = default;
        
        
        // Compiler generated operator= OK
        Main& operator=(const Main&) = default;
        Main& operator=(Main&&) = default;

        bool operator==(const Main& other) const
        {
            return true
                && (notifications == other.notifications);
        }

        bool operator!=(const Main& other) const
        {
            return !(*this == other);
        }

        void swap(Main& other)
        {
            using std::swap;
            swap(notifications, other.notifications);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Main& left, ::benchmark::Main& right)
    {
        left.swap(right);
    }
} // namespace benchmark
