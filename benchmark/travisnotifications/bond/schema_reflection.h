
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/travisnotifications/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Notification
    //
    struct Notification::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_secure_metadata;

        public: struct var
        {
            // secure
            typedef struct secure_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Notification,
                std::string,
                &Notification::secure,
                &s_secure_metadata
            > {} secure;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::secure>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Notification", "benchmark.Notification",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Notifications
    //
    struct Notifications::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_campfire_metadata;
        private: static const ::bond::Metadata s_irc_metadata;
        private: static const ::bond::Metadata s_flowdock_metadata;
        private: static const ::bond::Metadata s_hipchat_metadata;
        private: static const ::bond::Metadata s_slack_metadata;
        private: static const ::bond::Metadata s_webhooks_metadata;
        private: static const ::bond::Metadata s_email_metadata;

        public: struct var
        {
            // campfire
            typedef struct campfire_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Notifications,
                ::benchmark::Notification,
                &Notifications::campfire,
                &s_campfire_metadata
            > {} campfire;
        
            // irc
            typedef struct irc_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Notifications,
                ::benchmark::Notification,
                &Notifications::irc,
                &s_irc_metadata
            > {} irc;
        
            // flowdock
            typedef struct flowdock_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Notifications,
                ::benchmark::Notification,
                &Notifications::flowdock,
                &s_flowdock_metadata
            > {} flowdock;
        
            // hipchat
            typedef struct hipchat_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Notifications,
                ::benchmark::Notification,
                &Notifications::hipchat,
                &s_hipchat_metadata
            > {} hipchat;
        
            // slack
            typedef struct slack_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Notifications,
                ::benchmark::Notification,
                &Notifications::slack,
                &s_slack_metadata
            > {} slack;
        
            // webhooks
            typedef struct webhooks_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Notifications,
                ::benchmark::Notification,
                &Notifications::webhooks,
                &s_webhooks_metadata
            > {} webhooks;
        
            // email
            typedef struct email_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Notifications,
                ::benchmark::Notification,
                &Notifications::email,
                &s_email_metadata
            > {} email;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::email>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::webhooks>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::slack>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::hipchat>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::flowdock>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::irc>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::campfire>::type fields7;

        public: typedef fields7::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Notifications", "benchmark.Notifications",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_notifications_metadata;

        public: struct var
        {
            // notifications
            typedef struct notifications_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Notifications,
                &Main::notifications,
                &s_notifications_metadata
            > {} notifications;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::notifications>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
