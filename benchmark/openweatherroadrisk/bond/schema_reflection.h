
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/openweatherroadrisk/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Alert
    //
    struct Alert::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_sender_name_metadata;
        private: static const ::bond::Metadata s_event_metadata;
        private: static const ::bond::Metadata s_event_level_metadata;

        public: struct var
        {
            // sender_name
            typedef struct sender_name_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Alert,
                std::string,
                &Alert::sender_name,
                &s_sender_name_metadata
            > {} sender_name;
        
            // event
            typedef struct event_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Alert,
                std::string,
                &Alert::event,
                &s_event_metadata
            > {} event;
        
            // event_level
            typedef struct event_level_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Alert,
                uint8_t,
                &Alert::event_level,
                &s_event_level_metadata
            > {} event_level;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::event_level>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::event>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::sender_name>::type fields3;

        public: typedef fields3::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Alert", "benchmark.Alert",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Weather
    //
    struct Weather::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_temp_metadata;
        private: static const ::bond::Metadata s_wind_speed_metadata;
        private: static const ::bond::Metadata s_wind_deg_metadata;
        private: static const ::bond::Metadata s_precipitation_intensity_metadata;
        private: static const ::bond::Metadata s_dew_point_metadata;

        public: struct var
        {
            // temp
            typedef struct temp_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Weather,
                double,
                &Weather::temp,
                &s_temp_metadata
            > {} temp;
        
            // wind_speed
            typedef struct wind_speed_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Weather,
                double,
                &Weather::wind_speed,
                &s_wind_speed_metadata
            > {} wind_speed;
        
            // wind_deg
            typedef struct wind_deg_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Weather,
                uint16_t,
                &Weather::wind_deg,
                &s_wind_deg_metadata
            > {} wind_deg;
        
            // precipitation_intensity
            typedef struct precipitation_intensity_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::optional_field_modifier,
                Weather,
                ::bond::maybe<double>,
                &Weather::precipitation_intensity,
                &s_precipitation_intensity_metadata
            > {} precipitation_intensity;
        
            // dew_point
            typedef struct dew_point_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Weather,
                double,
                &Weather::dew_point,
                &s_dew_point_metadata
            > {} dew_point;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::dew_point>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::precipitation_intensity>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::wind_deg>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::wind_speed>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::temp>::type fields5;

        public: typedef fields5::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Weather", "benchmark.Weather",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // RoadRisk
    //
    struct RoadRisk::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_dt_metadata;
        private: static const ::bond::Metadata s_coord_metadata;
        private: static const ::bond::Metadata s_weather_metadata;
        private: static const ::bond::Metadata s_alerts_metadata;

        public: struct var
        {
            // dt
            typedef struct dt_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                RoadRisk,
                uint32_t,
                &RoadRisk::dt,
                &s_dt_metadata
            > {} dt;
        
            // coord
            typedef struct coord_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                RoadRisk,
                std::list<double>,
                &RoadRisk::coord,
                &s_coord_metadata
            > {} coord;
        
            // weather
            typedef struct weather_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                RoadRisk,
                ::benchmark::Weather,
                &RoadRisk::weather,
                &s_weather_metadata
            > {} weather;
        
            // alerts
            typedef struct alerts_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                RoadRisk,
                std::list< ::benchmark::Alert>,
                &RoadRisk::alerts,
                &s_alerts_metadata
            > {} alerts;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::alerts>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::weather>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::coord>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::dt>::type fields4;

        public: typedef fields4::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("RoadRisk", "benchmark.RoadRisk",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_risks_metadata;

        public: struct var
        {
            // risks
            typedef struct risks_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::RoadRisk>,
                &Main::risks,
                &s_risks_metadata
            > {} risks;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::risks>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
