
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/openweatherroadrisk/bond/schema.bond
//   Output filename: schema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x0902
#error This file was generated by a newer version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0c10
#error This file was generated by an older version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>



namespace benchmark
{
    
    struct Alert
    {
        std::string sender_name;
        std::string event;
        uint8_t event_level;
        
        Alert()
          : event_level()
        {
        }

        
        // Compiler generated copy ctor OK
        Alert(const Alert&) = default;
        
        Alert(Alert&&) = default;
        
        
        // Compiler generated operator= OK
        Alert& operator=(const Alert&) = default;
        Alert& operator=(Alert&&) = default;

        bool operator==(const Alert& other) const
        {
            return true
                && (sender_name == other.sender_name)
                && (event == other.event)
                && (event_level == other.event_level);
        }

        bool operator!=(const Alert& other) const
        {
            return !(*this == other);
        }

        void swap(Alert& other)
        {
            using std::swap;
            swap(sender_name, other.sender_name);
            swap(event, other.event);
            swap(event_level, other.event_level);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Alert& left, ::benchmark::Alert& right)
    {
        left.swap(right);
    }

    
    struct Weather
    {
        double temp;
        double wind_speed;
        uint16_t wind_deg;
        ::bond::maybe<double> precipitation_intensity;
        double dew_point;
        
        Weather()
          : temp(),
            wind_speed(),
            wind_deg(),
            dew_point()
        {
        }

        
        // Compiler generated copy ctor OK
        Weather(const Weather&) = default;
        
        Weather(Weather&&) = default;
        
        
        // Compiler generated operator= OK
        Weather& operator=(const Weather&) = default;
        Weather& operator=(Weather&&) = default;

        bool operator==(const Weather& other) const
        {
            return true
                && (temp == other.temp)
                && (wind_speed == other.wind_speed)
                && (wind_deg == other.wind_deg)
                && (precipitation_intensity == other.precipitation_intensity)
                && (dew_point == other.dew_point);
        }

        bool operator!=(const Weather& other) const
        {
            return !(*this == other);
        }

        void swap(Weather& other)
        {
            using std::swap;
            swap(temp, other.temp);
            swap(wind_speed, other.wind_speed);
            swap(wind_deg, other.wind_deg);
            swap(precipitation_intensity, other.precipitation_intensity);
            swap(dew_point, other.dew_point);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Weather& left, ::benchmark::Weather& right)
    {
        left.swap(right);
    }

    
    struct RoadRisk
    {
        uint32_t dt;
        std::list<double> coord;
        ::benchmark::Weather weather;
        std::list< ::benchmark::Alert> alerts;
        
        RoadRisk()
          : dt()
        {
        }

        
        // Compiler generated copy ctor OK
        RoadRisk(const RoadRisk&) = default;
        
        RoadRisk(RoadRisk&&) = default;
        
        
        // Compiler generated operator= OK
        RoadRisk& operator=(const RoadRisk&) = default;
        RoadRisk& operator=(RoadRisk&&) = default;

        bool operator==(const RoadRisk& other) const
        {
            return true
                && (dt == other.dt)
                && (coord == other.coord)
                && (weather == other.weather)
                && (alerts == other.alerts);
        }

        bool operator!=(const RoadRisk& other) const
        {
            return !(*this == other);
        }

        void swap(RoadRisk& other)
        {
            using std::swap;
            swap(dt, other.dt);
            swap(coord, other.coord);
            swap(weather, other.weather);
            swap(alerts, other.alerts);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::RoadRisk& left, ::benchmark::RoadRisk& right)
    {
        left.swap(right);
    }

    
    struct Main
    {
        std::list< ::benchmark::RoadRisk> risks;
        
        Main()
        {
        }

        
        // Compiler generated copy ctor OK
        Main(const Main&) = default;
        
        Main(Main&&) = default;
        
        
        // Compiler generated operator= OK
        Main& operator=(const Main&) = default;
        Main& operator=(Main&&) = default;

        bool operator==(const Main& other) const
        {
            return true
                && (risks == other.risks);
        }

        bool operator!=(const Main& other) const
        {
            return !(*this == other);
        }

        void swap(Main& other)
        {
            using std::swap;
            swap(risks, other.risks);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Main& left, ::benchmark::Main& right)
    {
        left.swap(right);
    }
} // namespace benchmark
