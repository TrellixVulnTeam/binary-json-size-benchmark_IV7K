
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/jsonresume/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Location
    //
    struct Location::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_address_metadata;
        private: static const ::bond::Metadata s_postalCode_metadata;
        private: static const ::bond::Metadata s_city_metadata;
        private: static const ::bond::Metadata s_countryCode_metadata;
        private: static const ::bond::Metadata s_region_metadata;

        public: struct var
        {
            // address
            typedef struct address_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Location,
                std::string,
                &Location::address,
                &s_address_metadata
            > {} address;
        
            // postalCode
            typedef struct postalCode_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Location,
                std::string,
                &Location::postalCode,
                &s_postalCode_metadata
            > {} postalCode;
        
            // city
            typedef struct city_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Location,
                std::string,
                &Location::city,
                &s_city_metadata
            > {} city;
        
            // countryCode
            typedef struct countryCode_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Location,
                std::string,
                &Location::countryCode,
                &s_countryCode_metadata
            > {} countryCode;
        
            // region
            typedef struct region_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Location,
                std::string,
                &Location::region,
                &s_region_metadata
            > {} region;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::region>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::countryCode>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::city>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::postalCode>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::address>::type fields5;

        public: typedef fields5::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Location", "benchmark.Location",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Profile
    //
    struct Profile::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_network_metadata;
        private: static const ::bond::Metadata s_username_metadata;
        private: static const ::bond::Metadata s_url_metadata;

        public: struct var
        {
            // network
            typedef struct network_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Profile,
                std::string,
                &Profile::network,
                &s_network_metadata
            > {} network;
        
            // username
            typedef struct username_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Profile,
                std::string,
                &Profile::username,
                &s_username_metadata
            > {} username;
        
            // url
            typedef struct url_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Profile,
                std::string,
                &Profile::url,
                &s_url_metadata
            > {} url;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::url>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::username>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::network>::type fields3;

        public: typedef fields3::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Profile", "benchmark.Profile",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Basics
    //
    struct Basics::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_name_metadata;
        private: static const ::bond::Metadata s_label_metadata;
        private: static const ::bond::Metadata s_picture_metadata;
        private: static const ::bond::Metadata s_email_metadata;
        private: static const ::bond::Metadata s_phone_metadata;
        private: static const ::bond::Metadata s_website_metadata;
        private: static const ::bond::Metadata s_summary_metadata;
        private: static const ::bond::Metadata s_location_metadata;
        private: static const ::bond::Metadata s_profiles_metadata;

        public: struct var
        {
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Basics,
                std::string,
                &Basics::name,
                &s_name_metadata
            > {} name;
        
            // label
            typedef struct label_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Basics,
                std::string,
                &Basics::label,
                &s_label_metadata
            > {} label;
        
            // picture
            typedef struct picture_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Basics,
                std::string,
                &Basics::picture,
                &s_picture_metadata
            > {} picture;
        
            // email
            typedef struct email_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Basics,
                std::string,
                &Basics::email,
                &s_email_metadata
            > {} email;
        
            // phone
            typedef struct phone_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Basics,
                std::string,
                &Basics::phone,
                &s_phone_metadata
            > {} phone;
        
            // website
            typedef struct website_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Basics,
                std::string,
                &Basics::website,
                &s_website_metadata
            > {} website;
        
            // summary
            typedef struct summary_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Basics,
                std::string,
                &Basics::summary,
                &s_summary_metadata
            > {} summary;
        
            // location
            typedef struct location_type : ::bond::reflection::FieldTemplate<
                7,
                ::bond::reflection::required_field_modifier,
                Basics,
                ::benchmark::Location,
                &Basics::location,
                &s_location_metadata
            > {} location;
        
            // profiles
            typedef struct profiles_type : ::bond::reflection::FieldTemplate<
                8,
                ::bond::reflection::required_field_modifier,
                Basics,
                std::list< ::benchmark::Profile>,
                &Basics::profiles,
                &s_profiles_metadata
            > {} profiles;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::profiles>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::location>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::summary>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::website>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::phone>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::email>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::picture>::type fields7;
        private: typedef boost::mpl::push_front<fields7, var::label>::type fields8;
        private: typedef boost::mpl::push_front<fields8, var::name>::type fields9;

        public: typedef fields9::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Basics", "benchmark.Basics",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Work
    //
    struct Work::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_company_metadata;
        private: static const ::bond::Metadata s_position_metadata;
        private: static const ::bond::Metadata s_website_metadata;
        private: static const ::bond::Metadata s_startDate_metadata;
        private: static const ::bond::Metadata s_endDate_metadata;
        private: static const ::bond::Metadata s_summary_metadata;
        private: static const ::bond::Metadata s_highlights_metadata;

        public: struct var
        {
            // company
            typedef struct company_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Work,
                std::string,
                &Work::company,
                &s_company_metadata
            > {} company;
        
            // position
            typedef struct position_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Work,
                std::string,
                &Work::position,
                &s_position_metadata
            > {} position;
        
            // website
            typedef struct website_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Work,
                std::string,
                &Work::website,
                &s_website_metadata
            > {} website;
        
            // startDate
            typedef struct startDate_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Work,
                std::string,
                &Work::startDate,
                &s_startDate_metadata
            > {} startDate;
        
            // endDate
            typedef struct endDate_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Work,
                std::string,
                &Work::endDate,
                &s_endDate_metadata
            > {} endDate;
        
            // summary
            typedef struct summary_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Work,
                std::string,
                &Work::summary,
                &s_summary_metadata
            > {} summary;
        
            // highlights
            typedef struct highlights_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Work,
                std::list<std::string>,
                &Work::highlights,
                &s_highlights_metadata
            > {} highlights;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::highlights>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::summary>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::endDate>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::startDate>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::website>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::position>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::company>::type fields7;

        public: typedef fields7::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Work", "benchmark.Work",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Volunteer
    //
    struct Volunteer::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_organization_metadata;
        private: static const ::bond::Metadata s_position_metadata;
        private: static const ::bond::Metadata s_website_metadata;
        private: static const ::bond::Metadata s_startDate_metadata;
        private: static const ::bond::Metadata s_endDate_metadata;
        private: static const ::bond::Metadata s_summary_metadata;
        private: static const ::bond::Metadata s_highlights_metadata;

        public: struct var
        {
            // organization
            typedef struct organization_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Volunteer,
                std::string,
                &Volunteer::organization,
                &s_organization_metadata
            > {} organization;
        
            // position
            typedef struct position_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Volunteer,
                std::string,
                &Volunteer::position,
                &s_position_metadata
            > {} position;
        
            // website
            typedef struct website_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Volunteer,
                std::string,
                &Volunteer::website,
                &s_website_metadata
            > {} website;
        
            // startDate
            typedef struct startDate_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Volunteer,
                std::string,
                &Volunteer::startDate,
                &s_startDate_metadata
            > {} startDate;
        
            // endDate
            typedef struct endDate_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Volunteer,
                std::string,
                &Volunteer::endDate,
                &s_endDate_metadata
            > {} endDate;
        
            // summary
            typedef struct summary_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Volunteer,
                std::string,
                &Volunteer::summary,
                &s_summary_metadata
            > {} summary;
        
            // highlights
            typedef struct highlights_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Volunteer,
                std::list<std::string>,
                &Volunteer::highlights,
                &s_highlights_metadata
            > {} highlights;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::highlights>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::summary>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::endDate>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::startDate>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::website>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::position>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::organization>::type fields7;

        public: typedef fields7::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Volunteer", "benchmark.Volunteer",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Education
    //
    struct Education::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_institution_metadata;
        private: static const ::bond::Metadata s_area_metadata;
        private: static const ::bond::Metadata s_studyType_metadata;
        private: static const ::bond::Metadata s_startDate_metadata;
        private: static const ::bond::Metadata s_endDate_metadata;
        private: static const ::bond::Metadata s_gpa_metadata;
        private: static const ::bond::Metadata s_courses_metadata;

        public: struct var
        {
            // institution
            typedef struct institution_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Education,
                std::string,
                &Education::institution,
                &s_institution_metadata
            > {} institution;
        
            // area
            typedef struct area_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Education,
                std::string,
                &Education::area,
                &s_area_metadata
            > {} area;
        
            // studyType
            typedef struct studyType_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Education,
                std::string,
                &Education::studyType,
                &s_studyType_metadata
            > {} studyType;
        
            // startDate
            typedef struct startDate_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Education,
                std::string,
                &Education::startDate,
                &s_startDate_metadata
            > {} startDate;
        
            // endDate
            typedef struct endDate_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Education,
                std::string,
                &Education::endDate,
                &s_endDate_metadata
            > {} endDate;
        
            // gpa
            typedef struct gpa_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Education,
                std::string,
                &Education::gpa,
                &s_gpa_metadata
            > {} gpa;
        
            // courses
            typedef struct courses_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Education,
                std::list<std::string>,
                &Education::courses,
                &s_courses_metadata
            > {} courses;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::courses>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::gpa>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::endDate>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::startDate>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::studyType>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::area>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::institution>::type fields7;

        public: typedef fields7::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Education", "benchmark.Education",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Award
    //
    struct Award::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_title_metadata;
        private: static const ::bond::Metadata s_date_metadata;
        private: static const ::bond::Metadata s_awarder_metadata;
        private: static const ::bond::Metadata s_summary_metadata;

        public: struct var
        {
            // title
            typedef struct title_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Award,
                std::string,
                &Award::title,
                &s_title_metadata
            > {} title;
        
            // date
            typedef struct date_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Award,
                std::string,
                &Award::date,
                &s_date_metadata
            > {} date;
        
            // awarder
            typedef struct awarder_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Award,
                std::string,
                &Award::awarder,
                &s_awarder_metadata
            > {} awarder;
        
            // summary
            typedef struct summary_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Award,
                std::string,
                &Award::summary,
                &s_summary_metadata
            > {} summary;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::summary>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::awarder>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::date>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::title>::type fields4;

        public: typedef fields4::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Award", "benchmark.Award",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Publication
    //
    struct Publication::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_name_metadata;
        private: static const ::bond::Metadata s_publisher_metadata;
        private: static const ::bond::Metadata s_releaseDate_metadata;
        private: static const ::bond::Metadata s_website_metadata;
        private: static const ::bond::Metadata s_summary_metadata;

        public: struct var
        {
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Publication,
                std::string,
                &Publication::name,
                &s_name_metadata
            > {} name;
        
            // publisher
            typedef struct publisher_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Publication,
                std::string,
                &Publication::publisher,
                &s_publisher_metadata
            > {} publisher;
        
            // releaseDate
            typedef struct releaseDate_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Publication,
                std::string,
                &Publication::releaseDate,
                &s_releaseDate_metadata
            > {} releaseDate;
        
            // website
            typedef struct website_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Publication,
                std::string,
                &Publication::website,
                &s_website_metadata
            > {} website;
        
            // summary
            typedef struct summary_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Publication,
                std::string,
                &Publication::summary,
                &s_summary_metadata
            > {} summary;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::summary>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::website>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::releaseDate>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::publisher>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::name>::type fields5;

        public: typedef fields5::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Publication", "benchmark.Publication",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Skill
    //
    struct Skill::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_name_metadata;
        private: static const ::bond::Metadata s_level_metadata;
        private: static const ::bond::Metadata s_keywords_metadata;

        public: struct var
        {
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Skill,
                std::string,
                &Skill::name,
                &s_name_metadata
            > {} name;
        
            // level
            typedef struct level_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Skill,
                std::string,
                &Skill::level,
                &s_level_metadata
            > {} level;
        
            // keywords
            typedef struct keywords_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Skill,
                std::list<std::string>,
                &Skill::keywords,
                &s_keywords_metadata
            > {} keywords;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::keywords>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::level>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::name>::type fields3;

        public: typedef fields3::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Skill", "benchmark.Skill",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Language
    //
    struct Language::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_language_metadata;
        private: static const ::bond::Metadata s_fluency_metadata;

        public: struct var
        {
            // language
            typedef struct language_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Language,
                std::string,
                &Language::language,
                &s_language_metadata
            > {} language;
        
            // fluency
            typedef struct fluency_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Language,
                std::string,
                &Language::fluency,
                &s_fluency_metadata
            > {} fluency;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::fluency>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::language>::type fields2;

        public: typedef fields2::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Language", "benchmark.Language",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Interest
    //
    struct Interest::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_name_metadata;
        private: static const ::bond::Metadata s_keywords_metadata;

        public: struct var
        {
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Interest,
                std::string,
                &Interest::name,
                &s_name_metadata
            > {} name;
        
            // keywords
            typedef struct keywords_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Interest,
                std::list<std::string>,
                &Interest::keywords,
                &s_keywords_metadata
            > {} keywords;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::keywords>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::name>::type fields2;

        public: typedef fields2::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Interest", "benchmark.Interest",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Reference
    //
    struct Reference::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_name_metadata;
        private: static const ::bond::Metadata s_reference_metadata;

        public: struct var
        {
            // name
            typedef struct name_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Reference,
                std::string,
                &Reference::name,
                &s_name_metadata
            > {} name;
        
            // reference
            typedef struct reference_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Reference,
                std::string,
                &Reference::reference,
                &s_reference_metadata
            > {} reference;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::reference>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::name>::type fields2;

        public: typedef fields2::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Reference", "benchmark.Reference",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_basics_metadata;
        private: static const ::bond::Metadata s_work_metadata;
        private: static const ::bond::Metadata s_volunteer_metadata;
        private: static const ::bond::Metadata s_education_metadata;
        private: static const ::bond::Metadata s_awards_metadata;
        private: static const ::bond::Metadata s_publications_metadata;
        private: static const ::bond::Metadata s_skills_metadata;
        private: static const ::bond::Metadata s_languages_metadata;
        private: static const ::bond::Metadata s_interests_metadata;
        private: static const ::bond::Metadata s_references_metadata;

        public: struct var
        {
            // basics
            typedef struct basics_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Basics,
                &Main::basics,
                &s_basics_metadata
            > {} basics;
        
            // work
            typedef struct work_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Work>,
                &Main::work,
                &s_work_metadata
            > {} work;
        
            // volunteer
            typedef struct volunteer_type : ::bond::reflection::FieldTemplate<
                2,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Volunteer>,
                &Main::volunteer,
                &s_volunteer_metadata
            > {} volunteer;
        
            // education
            typedef struct education_type : ::bond::reflection::FieldTemplate<
                3,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Education>,
                &Main::education,
                &s_education_metadata
            > {} education;
        
            // awards
            typedef struct awards_type : ::bond::reflection::FieldTemplate<
                4,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Award>,
                &Main::awards,
                &s_awards_metadata
            > {} awards;
        
            // publications
            typedef struct publications_type : ::bond::reflection::FieldTemplate<
                5,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Publication>,
                &Main::publications,
                &s_publications_metadata
            > {} publications;
        
            // skills
            typedef struct skills_type : ::bond::reflection::FieldTemplate<
                6,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Skill>,
                &Main::skills,
                &s_skills_metadata
            > {} skills;
        
            // languages
            typedef struct languages_type : ::bond::reflection::FieldTemplate<
                7,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Language>,
                &Main::languages,
                &s_languages_metadata
            > {} languages;
        
            // interests
            typedef struct interests_type : ::bond::reflection::FieldTemplate<
                8,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Interest>,
                &Main::interests,
                &s_interests_metadata
            > {} interests;
        
            // references
            typedef struct references_type : ::bond::reflection::FieldTemplate<
                9,
                ::bond::reflection::required_field_modifier,
                Main,
                std::list< ::benchmark::Reference>,
                &Main::references,
                &s_references_metadata
            > {} references;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::references>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::interests>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::languages>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::skills>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::publications>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::awards>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::education>::type fields7;
        private: typedef boost::mpl::push_front<fields7, var::volunteer>::type fields8;
        private: typedef boost::mpl::push_front<fields8, var::work>::type fields9;
        private: typedef boost::mpl::push_front<fields9, var::basics>::type fields10;

        public: typedef fields10::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
