
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/jsonresume/bond/schema.bond
//   Output filename: schema_apply.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "schema_apply.h"
#include "schema_reflection.h"

namespace bond
{
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Location.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Location>& transform,
               const ::bond::bonded< ::benchmark::Location>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Location& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Location, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Location>& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Location>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Location& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Location& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Location& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Location>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Location& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Location>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Location>& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Location>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Location& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Location& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Location>& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Location>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Location& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Location& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Location,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Profile.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Profile>& transform,
               const ::bond::bonded< ::benchmark::Profile>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Profile& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Profile, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Profile>& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Profile>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Profile& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Profile& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Profile& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Profile>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Profile& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Profile>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Profile>& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Profile>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Profile& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Profile& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Profile>& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Profile>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Profile& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Profile& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Profile,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Basics.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Basics>& transform,
               const ::bond::bonded< ::benchmark::Basics>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Basics& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Basics, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Basics>& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Basics>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Basics& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Basics& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Basics& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Basics>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Basics& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Basics>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Basics>& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Basics>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Basics& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Basics& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Basics>& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Basics>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Basics& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Basics& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Basics,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Work.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Work>& transform,
               const ::bond::bonded< ::benchmark::Work>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Work& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Work, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Work>& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Work>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Work& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Work& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Work& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Work>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Work& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Work>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Work>& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Work>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Work& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Work& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Work>& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Work>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Work& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Work& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Work,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Volunteer.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Volunteer>& transform,
               const ::bond::bonded< ::benchmark::Volunteer>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Volunteer& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Volunteer, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Volunteer>& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Volunteer>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Volunteer& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Volunteer& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Volunteer& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Volunteer>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Volunteer& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Volunteer>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Volunteer>& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Volunteer>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Volunteer& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Volunteer& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Volunteer>& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Volunteer>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Volunteer& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Volunteer& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Volunteer,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Education.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Education>& transform,
               const ::bond::bonded< ::benchmark::Education>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Education& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Education, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Education>& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Education>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Education& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Education& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Education& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Education>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Education& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Education>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Education>& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Education>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Education& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Education& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Education>& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Education>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Education& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Education& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Education,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Award.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Award>& transform,
               const ::bond::bonded< ::benchmark::Award>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Award& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Award, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Award>& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Award>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Award& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Award& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Award& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Award>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Award& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Award>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Award>& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Award>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Award& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Award& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Award>& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Award>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Award& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Award& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Award,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Publication.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Publication>& transform,
               const ::bond::bonded< ::benchmark::Publication>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Publication& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Publication, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Publication>& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Publication>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Publication& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Publication& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Publication& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Publication>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Publication& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Publication>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Publication>& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Publication>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Publication& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Publication& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Publication>& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Publication>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Publication& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Publication& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Publication,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Skill.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Skill>& transform,
               const ::bond::bonded< ::benchmark::Skill>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Skill& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Skill, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Skill>& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Skill>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Skill& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Skill& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Skill& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Skill>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Skill& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Skill>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Skill>& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Skill>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Skill& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Skill& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Skill>& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Skill>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Skill& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Skill& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Skill,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Language.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Language>& transform,
               const ::bond::bonded< ::benchmark::Language>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Language& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Language, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Language>& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Language>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Language& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Language& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Language& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Language>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Language& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Language>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Language>& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Language>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Language& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Language& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Language>& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Language>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Language& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Language& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Language,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Interest.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Interest>& transform,
               const ::bond::bonded< ::benchmark::Interest>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Interest& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Interest, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Interest>& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Interest>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Interest& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Interest& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Interest& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Interest>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Interest& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Interest>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Interest>& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Interest>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Interest& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Interest& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Interest>& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Interest>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Interest& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Interest& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Interest,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Reference.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Reference>& transform,
               const ::bond::bonded< ::benchmark::Reference>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Reference& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Reference, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Reference>& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Reference>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Reference& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Reference& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Reference& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Reference>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Reference& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Reference>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Reference>& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Reference>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Reference& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Reference& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Reference>& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Reference>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Reference& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Reference& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Reference,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Main.
    //

    template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main>& value);

    template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Main& value);

    template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Main, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Main& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Main& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
} // namespace bond
