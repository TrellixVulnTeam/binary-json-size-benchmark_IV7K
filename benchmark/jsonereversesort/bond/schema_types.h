
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/jsonereversesort/bond/schema.bond
//   Output filename: schema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x0902
#error This file was generated by a newer version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0c10
#error This file was generated by an older version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>



namespace benchmark
{
    
    struct Let
    {
        std::list<uint8_t> x;
        
        Let()
        {
        }

        
        // Compiler generated copy ctor OK
        Let(const Let&) = default;
        
        Let(Let&&) = default;
        
        
        // Compiler generated operator= OK
        Let& operator=(const Let&) = default;
        Let& operator=(Let&&) = default;

        bool operator==(const Let& other) const
        {
            return true
                && (x == other.x);
        }

        bool operator!=(const Let& other) const
        {
            return !(*this == other);
        }

        void swap(Let& other)
        {
            using std::swap;
            swap(x, other.x);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Let& left, ::benchmark::Let& right)
    {
        left.swap(right);
    }

    
    struct Sort
    {
        std::string eval;
        
        Sort()
        {
        }

        
        // Compiler generated copy ctor OK
        Sort(const Sort&) = default;
        
        Sort(Sort&&) = default;
        
        
        // Compiler generated operator= OK
        Sort& operator=(const Sort&) = default;
        Sort& operator=(Sort&&) = default;

        bool operator==(const Sort& other) const
        {
            return true
                && (eval == other.eval);
        }

        bool operator!=(const Sort& other) const
        {
            return !(*this == other);
        }

        void swap(Sort& other)
        {
            using std::swap;
            swap(eval, other.eval);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Sort& left, ::benchmark::Sort& right)
    {
        left.swap(right);
    }

    
    struct Reverse
    {
        ::benchmark::Sort sort;
        std::string byX;
        
        Reverse()
        {
        }

        
        // Compiler generated copy ctor OK
        Reverse(const Reverse&) = default;
        
        Reverse(Reverse&&) = default;
        
        
        // Compiler generated operator= OK
        Reverse& operator=(const Reverse&) = default;
        Reverse& operator=(Reverse&&) = default;

        bool operator==(const Reverse& other) const
        {
            return true
                && (sort == other.sort)
                && (byX == other.byX);
        }

        bool operator!=(const Reverse& other) const
        {
            return !(*this == other);
        }

        void swap(Reverse& other)
        {
            using std::swap;
            swap(sort, other.sort);
            swap(byX, other.byX);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Reverse& left, ::benchmark::Reverse& right)
    {
        left.swap(right);
    }

    
    struct In
    {
        ::benchmark::Reverse reverse;
        
        In()
        {
        }

        
        // Compiler generated copy ctor OK
        In(const In&) = default;
        
        In(In&&) = default;
        
        
        // Compiler generated operator= OK
        In& operator=(const In&) = default;
        In& operator=(In&&) = default;

        bool operator==(const In& other) const
        {
            return true
                && (reverse == other.reverse);
        }

        bool operator!=(const In& other) const
        {
            return !(*this == other);
        }

        void swap(In& other)
        {
            using std::swap;
            swap(reverse, other.reverse);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::In& left, ::benchmark::In& right)
    {
        left.swap(right);
    }

    
    struct Main
    {
        ::benchmark::Let let;
        ::benchmark::In in;
        
        Main()
        {
        }

        
        // Compiler generated copy ctor OK
        Main(const Main&) = default;
        
        Main(Main&&) = default;
        
        
        // Compiler generated operator= OK
        Main& operator=(const Main&) = default;
        Main& operator=(Main&&) = default;

        bool operator==(const Main& other) const
        {
            return true
                && (let == other.let)
                && (in == other.in);
        }

        bool operator!=(const Main& other) const
        {
            return !(*this == other);
        }

        void swap(Main& other)
        {
            using std::swap;
            swap(let, other.let);
            swap(in, other.in);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Main& left, ::benchmark::Main& right)
    {
        left.swap(right);
    }
} // namespace benchmark
