
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/tslintbasic/bond/schema.bond
//   Output filename: schema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x0902
#error This file was generated by a newer version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0c10
#error This file was generated by an older version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>



namespace benchmark
{
    
    struct Options
    {
        bool groupedImports;
        
        Options()
          : groupedImports()
        {
        }

        
        // Compiler generated copy ctor OK
        Options(const Options&) = default;
        
        Options(Options&&) = default;
        
        
        // Compiler generated operator= OK
        Options& operator=(const Options&) = default;
        Options& operator=(Options&&) = default;

        bool operator==(const Options& other) const
        {
            return true
                && (groupedImports == other.groupedImports);
        }

        bool operator!=(const Options& other) const
        {
            return !(*this == other);
        }

        void swap(Options& other)
        {
            using std::swap;
            swap(groupedImports, other.groupedImports);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Options& left, ::benchmark::Options& right)
    {
        left.swap(right);
    }

    
    struct OrderedImports
    {
        ::benchmark::Options options;
        
        OrderedImports()
        {
        }

        
        // Compiler generated copy ctor OK
        OrderedImports(const OrderedImports&) = default;
        
        OrderedImports(OrderedImports&&) = default;
        
        
        // Compiler generated operator= OK
        OrderedImports& operator=(const OrderedImports&) = default;
        OrderedImports& operator=(OrderedImports&&) = default;

        bool operator==(const OrderedImports& other) const
        {
            return true
                && (options == other.options);
        }

        bool operator!=(const OrderedImports& other) const
        {
            return !(*this == other);
        }

        void swap(OrderedImports& other)
        {
            using std::swap;
            swap(options, other.options);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::OrderedImports& left, ::benchmark::OrderedImports& right)
    {
        left.swap(right);
    }

    
    struct Rules
    {
        ::benchmark::OrderedImports orderedImports;
        
        Rules()
        {
        }

        
        // Compiler generated copy ctor OK
        Rules(const Rules&) = default;
        
        Rules(Rules&&) = default;
        
        
        // Compiler generated operator= OK
        Rules& operator=(const Rules&) = default;
        Rules& operator=(Rules&&) = default;

        bool operator==(const Rules& other) const
        {
            return true
                && (orderedImports == other.orderedImports);
        }

        bool operator!=(const Rules& other) const
        {
            return !(*this == other);
        }

        void swap(Rules& other)
        {
            using std::swap;
            swap(orderedImports, other.orderedImports);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Rules& left, ::benchmark::Rules& right)
    {
        left.swap(right);
    }

    
    struct Main
    {
        ::benchmark::Rules rules;
        
        Main()
        {
        }

        
        // Compiler generated copy ctor OK
        Main(const Main&) = default;
        
        Main(Main&&) = default;
        
        
        // Compiler generated operator= OK
        Main& operator=(const Main&) = default;
        Main& operator=(Main&&) = default;

        bool operator==(const Main& other) const
        {
            return true
                && (rules == other.rules);
        }

        bool operator!=(const Main& other) const
        {
            return !(*this == other);
        }

        void swap(Main& other)
        {
            using std::swap;
            swap(rules, other.rules);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Main& left, ::benchmark::Main& right)
    {
        left.swap(right);
    }
} // namespace benchmark
