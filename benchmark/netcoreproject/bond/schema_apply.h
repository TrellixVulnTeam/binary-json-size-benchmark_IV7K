
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/netcoreproject/bond/schema.bond
//   Output filename: schema_apply.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/bond.h>
#include <bond/stream/output_buffer.h>


namespace bond
{
    
    //
    // Extern template specializations of Apply function with common
    // transforms for CompilationOptions.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::CompilationOptions>& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::CompilationOptions& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::CompilationOptions>& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::CompilationOptions>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::CompilationOptions& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::CompilationOptions& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::CompilationOptions& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::CompilationOptions& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::CompilationOptions>& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::CompilationOptions>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::CompilationOptions& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::CompilationOptions& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::CompilationOptions>& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::CompilationOptions>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::CompilationOptions& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::CompilationOptions& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::CompilationOptions,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Dependencies.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Dependencies>& transform,
               const ::bond::bonded< ::benchmark::Dependencies>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Dependencies& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Dependencies, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Dependencies>& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Dependencies>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Dependencies>& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Dependencies>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Dependencies>& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Dependencies>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Net45Dependencies.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45Dependencies>& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Net45Dependencies& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45Dependencies>& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45Dependencies>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Net45Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Net45Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45Dependencies>& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45Dependencies>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45Dependencies>& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45Dependencies>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for K10Dependencies.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10Dependencies>& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::K10Dependencies& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10Dependencies>& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10Dependencies>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::K10Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::K10Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10Dependencies>& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10Dependencies>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10Dependencies>& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10Dependencies>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10Dependencies& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10Dependencies& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10Dependencies,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Net45.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45>& transform,
               const ::bond::bonded< ::benchmark::Net45>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Net45& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Net45, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45>& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Net45& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Net45& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45>& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45>& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Net45>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Net45& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Net45,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for K10.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10>& transform,
               const ::bond::bonded< ::benchmark::K10>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::K10& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::K10, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10>& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::K10& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::K10& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10>& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10>& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::K10>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::K10& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::K10,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Frameworks.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Frameworks>& transform,
               const ::bond::bonded< ::benchmark::Frameworks>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Frameworks& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Frameworks, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Frameworks>& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Frameworks>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Frameworks& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Frameworks& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Frameworks& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Frameworks>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Frameworks& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Frameworks>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Frameworks>& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Frameworks>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Frameworks& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Frameworks& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Frameworks>& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Frameworks>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Frameworks& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Frameworks& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Frameworks,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    //
    // Extern template specializations of Apply function with common
    // transforms for Main.
    //

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main>& value);

    extern template 
    bool Apply(const ::bond::InitSchemaDef& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Null& transform,
               const ::bond::bonded< ::benchmark::Main, ::bond::SimpleBinaryReader< ::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::CompactBinaryWriter<::bond::OutputBuffer>::Pass0 >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::FastBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);

    extern template 
    bool Apply(const ::bond::To< ::benchmark::Main>& transform,
               const ::bond::bonded<void,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Serializer< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::benchmark::Main& value);

    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::CompactBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::FastBinaryReader<::bond::InputBuffer>&>& value);
    
    extern template 
    bool Apply(const ::bond::Marshaler< ::bond::SimpleBinaryWriter<::bond::OutputBuffer> >& transform,
               const ::bond::bonded< ::benchmark::Main,  ::bond::SimpleBinaryReader<::bond::InputBuffer>&>& value);
    
} // namespace bond
