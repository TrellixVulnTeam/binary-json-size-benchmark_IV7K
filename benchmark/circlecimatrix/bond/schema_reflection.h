
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/circlecimatrix/bond/schema.bond
//   Output filename: schema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "schema_types.h"
#include <bond/core/reflection.h>

namespace benchmark
{
    //
    // Parameters
    //
    struct Parameters::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_a_metadata;

        public: struct var
        {
            // a
            typedef struct a_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Parameters,
                std::list<uint8_t>,
                &Parameters::a,
                &s_a_metadata
            > {} a;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::a>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Parameters", "benchmark.Parameters",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Matrix
    //
    struct Matrix::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_parameters_metadata;

        public: struct var
        {
            // parameters
            typedef struct parameters_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Matrix,
                ::benchmark::Parameters,
                &Matrix::parameters,
                &s_parameters_metadata
            > {} parameters;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::parameters>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Matrix", "benchmark.Matrix",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // M1
    //
    struct M1::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_matrix_metadata;

        public: struct var
        {
            // matrix
            typedef struct matrix_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                M1,
                ::benchmark::Matrix,
                &M1::matrix,
                &s_matrix_metadata
            > {} matrix;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::matrix>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("M1", "benchmark.M1",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Job
    //
    struct Job::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_m1_metadata;

        public: struct var
        {
            // m1
            typedef struct m1_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Job,
                ::benchmark::M1,
                &Job::m1,
                &s_m1_metadata
            > {} m1;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::m1>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Job", "benchmark.Job",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // TestWorkflow
    //
    struct TestWorkflow::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_jobs_metadata;

        public: struct var
        {
            // jobs
            typedef struct jobs_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                TestWorkflow,
                std::list< ::benchmark::Job>,
                &TestWorkflow::jobs,
                &s_jobs_metadata
            > {} jobs;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::jobs>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("TestWorkflow", "benchmark.TestWorkflow",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Workflows
    //
    struct Workflows::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_test_metadata;

        public: struct var
        {
            // test
            typedef struct test_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Workflows,
                ::benchmark::TestWorkflow,
                &Workflows::test,
                &s_test_metadata
            > {} test;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::test>::type fields1;

        public: typedef fields1::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Workflows", "benchmark.Workflows",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Main
    //
    struct Main::Schema
    {
        typedef ::bond::no_base base;

        static const ::bond::Metadata metadata;
        
        private: static const ::bond::Metadata s_version_metadata;
        private: static const ::bond::Metadata s_workflows_metadata;

        public: struct var
        {
            // version
            typedef struct version_type : ::bond::reflection::FieldTemplate<
                0,
                ::bond::reflection::required_field_modifier,
                Main,
                double,
                &Main::version,
                &s_version_metadata
            > {} version;
        
            // workflows
            typedef struct workflows_type : ::bond::reflection::FieldTemplate<
                1,
                ::bond::reflection::required_field_modifier,
                Main,
                ::benchmark::Workflows,
                &Main::workflows,
                &s_workflows_metadata
            > {} workflows;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::workflows>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::version>::type fields2;

        public: typedef fields2::type fields;
        
        
        static ::bond::Metadata GetMetadata()
        {
            return ::bond::reflection::MetadataInit("Main", "benchmark.Main",
                ::bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace benchmark
