
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.12.1.0
//   Input filename:  benchmark/gruntcontribclean/bond/schema.bond
//   Output filename: schema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x0902
#error This file was generated by a newer version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0c10
#error This file was generated by an older version of the Bond compiler and is incompatible with your version of the Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>



namespace benchmark
{
    
    struct Options
    {
        bool force;
        bool noWrite;
        
        Options()
          : force(),
            noWrite()
        {
        }

        
        // Compiler generated copy ctor OK
        Options(const Options&) = default;
        
        Options(Options&&) = default;
        
        
        // Compiler generated operator= OK
        Options& operator=(const Options&) = default;
        Options& operator=(Options&&) = default;

        bool operator==(const Options& other) const
        {
            return true
                && (force == other.force)
                && (noWrite == other.noWrite);
        }

        bool operator!=(const Options& other) const
        {
            return !(*this == other);
        }

        void swap(Options& other)
        {
            using std::swap;
            swap(force, other.force);
            swap(noWrite, other.noWrite);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Options& left, ::benchmark::Options& right)
    {
        left.swap(right);
    }

    
    struct Files
    {
        
        Files()
        {
        }

        
        // Compiler generated copy ctor OK
        Files(const Files&) = default;
        
        Files(Files&&) = default;
        
        
        // Compiler generated operator= OK
        Files& operator=(const Files&) = default;
        Files& operator=(Files&&) = default;

        bool operator==(const Files&) const
        {
            return true;
        }

        bool operator!=(const Files& other) const
        {
            return !(*this == other);
        }

        void swap(Files&)
        {
            using std::swap;
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Files& left, ::benchmark::Files& right)
    {
        left.swap(right);
    }

    
    struct MainOptions
    {
        ::benchmark::Files files;
        std::list<std::string> src;
        
        MainOptions()
        {
        }

        
        // Compiler generated copy ctor OK
        MainOptions(const MainOptions&) = default;
        
        MainOptions(MainOptions&&) = default;
        
        
        // Compiler generated operator= OK
        MainOptions& operator=(const MainOptions&) = default;
        MainOptions& operator=(MainOptions&&) = default;

        bool operator==(const MainOptions& other) const
        {
            return true
                && (files == other.files)
                && (src == other.src);
        }

        bool operator!=(const MainOptions& other) const
        {
            return !(*this == other);
        }

        void swap(MainOptions& other)
        {
            using std::swap;
            swap(files, other.files);
            swap(src, other.src);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::MainOptions& left, ::benchmark::MainOptions& right)
    {
        left.swap(right);
    }

    
    struct Main
    {
        std::list<std::string> foo;
        ::benchmark::MainOptions main;
        ::benchmark::Options options;
        
        Main()
        {
        }

        
        // Compiler generated copy ctor OK
        Main(const Main&) = default;
        
        Main(Main&&) = default;
        
        
        // Compiler generated operator= OK
        Main& operator=(const Main&) = default;
        Main& operator=(Main&&) = default;

        bool operator==(const Main& other) const
        {
            return true
                && (foo == other.foo)
                && (main == other.main)
                && (options == other.options);
        }

        bool operator!=(const Main& other) const
        {
            return !(*this == other);
        }

        void swap(Main& other)
        {
            using std::swap;
            swap(foo, other.foo);
            swap(main, other.main);
            swap(options, other.options);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(::benchmark::Main& left, ::benchmark::Main& right)
    {
        left.swap(right);
    }
} // namespace benchmark
